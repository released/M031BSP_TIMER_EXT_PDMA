; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\i2c_lsm6ds3.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\i2c_lsm6ds3.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\Library\StdDriver\inc -I..\Kalman_Filter -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\i2c_lsm6ds3.crf ..\I2C_LSM6DS3.c]
                          THUMB

                          AREA ||i.Accelerator_Calibration||, CODE, READONLY, ALIGN=2

                  Accelerator_Calibration PROC
;;;517    
;;;518    void Accelerator_Calibration(void)
000000  b500              PUSH     {lr}
;;;519    {
;;;520    	int32_t accX = 0;
;;;521    	int32_t accY = 0;
;;;522    	int32_t accZ = 0;		
;;;523    
;;;524    //	uint16_t integerX = 0;
;;;525    //	uint16_t integerY = 0;	
;;;526    //	uint16_t integerZ = 0;		
;;;527    	
;;;528    	if (Flag_Calibrate)
000002  481f              LDR      r0,|L1.128|
000004  7840              LDRB     r0,[r0,#1]  ; Flag_Calibrate
000006  2800              CMP      r0,#0
000008  d038              BEQ      |L1.124|
;;;529    	{
;;;530    		appLSM6DS3_SetAccCalData(AXIS_X,0);	//reset calibration data
00000a  2100              MOVS     r1,#0
00000c  4608              MOV      r0,r1
00000e  f7fffffe          BL       appLSM6DS3_SetAccCalData
;;;531    		accX = appLSM6DS3_GetAccData(AXIS_X);
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       appLSM6DS3_GetAccData
;;;532    		if (MEMSABS(accX)>0)
000018  0041              LSLS     r1,r0,#1
00001a  d004              BEQ      |L1.38|
;;;533    		{
;;;534    			appLSM6DS3_SetAccCalData(AXIS_X,-accX);
00001c  4240              RSBS     r0,r0,#0
00001e  b201              SXTH     r1,r0
000020  2000              MOVS     r0,#0
000022  f7fffffe          BL       appLSM6DS3_SetAccCalData
                  |L1.38|
;;;535    
;;;536    		}
;;;537    
;;;538    		appLSM6DS3_SetAccCalData(AXIS_Y,0);		//reset calibration data
000026  2100              MOVS     r1,#0
000028  2001              MOVS     r0,#1
00002a  f7fffffe          BL       appLSM6DS3_SetAccCalData
;;;539    		accY = appLSM6DS3_GetAccData(AXIS_Y);		
00002e  2001              MOVS     r0,#1
000030  f7fffffe          BL       appLSM6DS3_GetAccData
;;;540    		if (MEMSABS(accY)>0)
000034  0041              LSLS     r1,r0,#1
000036  d004              BEQ      |L1.66|
;;;541    		{
;;;542    			appLSM6DS3_SetAccCalData(AXIS_Y,-accY);
000038  4240              RSBS     r0,r0,#0
00003a  b201              SXTH     r1,r0
00003c  2001              MOVS     r0,#1
00003e  f7fffffe          BL       appLSM6DS3_SetAccCalData
                  |L1.66|
;;;543    
;;;544    		}
;;;545    
;;;546    		appLSM6DS3_SetAccCalData(AXIS_Z,0);		//reset calibration data
000042  2100              MOVS     r1,#0
000044  2002              MOVS     r0,#2
000046  f7fffffe          BL       appLSM6DS3_SetAccCalData
;;;547    		accZ = appLSM6DS3_GetAccData(AXIS_Z);		
00004a  2002              MOVS     r0,#2
00004c  f7fffffe          BL       appLSM6DS3_GetAccData
;;;548    		if ((MEMSABS(accZ)>1000)||(MEMSABS(accZ)<=999))
000050  2800              CMP      r0,#0
000052  db01              BLT      |L1.88|
000054  4601              MOV      r1,r0
000056  e000              B        |L1.90|
                  |L1.88|
000058  4241              RSBS     r1,r0,#0
                  |L1.90|
00005a  227d              MOVS     r2,#0x7d
00005c  00d2              LSLS     r2,r2,#3
00005e  4291              CMP      r1,r2
000060  dc07              BGT      |L1.114|
000062  2800              CMP      r0,#0
000064  db01              BLT      |L1.106|
000066  4601              MOV      r1,r0
000068  e000              B        |L1.108|
                  |L1.106|
00006a  4241              RSBS     r1,r0,#0
                  |L1.108|
00006c  4b05              LDR      r3,|L1.132|
00006e  4299              CMP      r1,r3
000070  dc04              BGT      |L1.124|
                  |L1.114|
;;;549    		{
;;;550    			appLSM6DS3_SetAccCalData(AXIS_Z,-accZ+1000);
000072  1a10              SUBS     r0,r2,r0
000074  b201              SXTH     r1,r0
000076  2002              MOVS     r0,#2
000078  f7fffffe          BL       appLSM6DS3_SetAccCalData
                  |L1.124|
;;;551    
;;;552    		}
;;;553    		
;;;554    //		printf("%s : %4d,%4d,%4d\r\n",__FUNCTION__,accX,accY,accZ);
;;;555    	}
;;;556    }
00007c  bd00              POP      {pc}
;;;557    
                          ENDP

00007e  0000              DCW      0x0000
                  |L1.128|
                          DCD      ||.data||
                  |L1.132|
                          DCD      0x000003e7

                          AREA ||i.Accelerator_filter||, CODE, READONLY, ALIGN=2

                  Accelerator_filter PROC
;;;557    
;;;558    void Accelerator_filter(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;559    {
;;;560    	#if defined (ENABLE_AVERAGE_FILTER)
;;;561    
;;;562    	uint8_t i;
;;;563    	int32_t ax_sum = 0, ay_sum = 0, az_sum = 0; 
000002  2500              MOVS     r5,#0
;;;564    
;;;565    	for(i = 1 ; i < FILTER_COUNT; i++)
;;;566    	{
;;;567    		ax_buf[i - 1] = ax_buf[i];
000004  4f1e              LDR      r7,|L2.128|
000006  462c              MOV      r4,r5                 ;563
000008  462b              MOV      r3,r5                 ;563
00000a  2101              MOVS     r1,#1                 ;565
                  |L2.12|
00000c  0048              LSLS     r0,r1,#1
00000e  19c6              ADDS     r6,r0,r7
000010  5a3a              LDRH     r2,[r7,r0]
000012  3e40              SUBS     r6,r6,#0x40
000014  87f2              STRH     r2,[r6,#0x3e]
;;;568    		ay_buf[i - 1] = ay_buf[i];
000016  4a1a              LDR      r2,|L2.128|
;;;569    		az_buf[i - 1] = az_buf[i];
000018  1c49              ADDS     r1,r1,#1
00001a  3220              ADDS     r2,r2,#0x20           ;568
00001c  5a16              LDRH     r6,[r2,r0]            ;568
00001e  1882              ADDS     r2,r0,r2              ;568
000020  3a40              SUBS     r2,r2,#0x40           ;568
000022  87d6              STRH     r6,[r2,#0x3e]         ;568
000024  4e16              LDR      r6,|L2.128|
000026  b2c9              UXTB     r1,r1                 ;565
000028  3640              ADDS     r6,r6,#0x40
00002a  5a32              LDRH     r2,[r6,r0]
00002c  1980              ADDS     r0,r0,r6
00002e  3840              SUBS     r0,r0,#0x40
000030  87c2              STRH     r2,[r0,#0x3e]
000032  2910              CMP      r1,#0x10              ;565
000034  d3ea              BCC      |L2.12|
;;;570    	}
;;;571    
;;;572    	ax_buf[FILTER_COUNT - 1] = appLSM6DS3_GetAccData(AXIS_X);
000036  2000              MOVS     r0,#0
000038  f7fffffe          BL       appLSM6DS3_GetAccData
00003c  83f8              STRH     r0,[r7,#0x1e]
;;;573    	ay_buf[FILTER_COUNT - 1] = appLSM6DS3_GetAccData(AXIS_Y);
00003e  2001              MOVS     r0,#1
000040  f7fffffe          BL       appLSM6DS3_GetAccData
000044  3e20              SUBS     r6,r6,#0x20
000046  83f0              STRH     r0,[r6,#0x1e]
;;;574    	az_buf[FILTER_COUNT - 1] = appLSM6DS3_GetAccData(AXIS_Z);
000048  2002              MOVS     r0,#2
00004a  f7fffffe          BL       appLSM6DS3_GetAccData
00004e  4631              MOV      r1,r6
000050  3120              ADDS     r1,r1,#0x20
000052  83c8              STRH     r0,[r1,#0x1e]
;;;575    
;;;576    	for(i = 0 ; i < FILTER_COUNT; i++)
000054  2000              MOVS     r0,#0
                  |L2.86|
;;;577    	{
;;;578    		ax_sum += ax_buf[i];
000056  4f0a              LDR      r7,|L2.128|
000058  0042              LSLS     r2,r0,#1
00005a  5ebf              LDRSH    r7,[r7,r2]
;;;579    		ay_sum += ay_buf[i];
;;;580    		az_sum += az_buf[i];
00005c  1c40              ADDS     r0,r0,#1
00005e  197d              ADDS     r5,r7,r5              ;578
000060  5eb7              LDRSH    r7,[r6,r2]            ;579
000062  5e8a              LDRSH    r2,[r1,r2]
000064  193c              ADDS     r4,r7,r4              ;579
000066  18d3              ADDS     r3,r2,r3
000068  b2c0              UXTB     r0,r0                 ;576
00006a  2810              CMP      r0,#0x10              ;576
00006c  d3f3              BCC      |L2.86|
;;;581    	}
;;;582    
;;;583    	ax = (int16_t)(ax_sum>>FILTER_FACTOR); //	/ FILTER_COUNT);
00006e  4805              LDR      r0,|L2.132|
000070  1129              ASRS     r1,r5,#4
000072  8401              STRH     r1,[r0,#0x20]
;;;584    	ay = (int16_t)(ay_sum>>FILTER_FACTOR); //	/ FILTER_COUNT);
000074  1121              ASRS     r1,r4,#4
000076  8441              STRH     r1,[r0,#0x22]
;;;585    	az = (int16_t)(az_sum>>FILTER_FACTOR); //	/ FILTER_COUNT);
000078  1119              ASRS     r1,r3,#4
00007a  8481              STRH     r1,[r0,#0x24]
;;;586    
;;;587    	#else
;;;588    	ax = appLSM6DS3_GetAccData(AXIS_X);
;;;589    	ay = appLSM6DS3_GetAccData(AXIS_Y);
;;;590    	az = appLSM6DS3_GetAccData(AXIS_Z);
;;;591    
;;;592    	#endif
;;;593    	
;;;594    }
00007c  bdf0              POP      {r4-r7,pc}
;;;595    
                          ENDP

00007e  0000              DCW      0x0000
                  |L2.128|
                          DCD      ||.bss||
                  |L2.132|
                          DCD      ||.data||

                          AREA ||i.Angle_Calculate||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_sizespec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  Angle_Calculate PROC
;;;632    
;;;633    void Angle_Calculate(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;634    {  
;;;635    	float s1 = 0;
;;;636    	float s2 = 0;	
;;;637    
;;;638    	Accelerator_filter();
000002  f7fffffe          BL       Accelerator_filter
;;;639    	Gyroscope_filter();
000006  f7fffffe          BL       Gyroscope_filter
;;;640    
;;;641    	s1 = sqrt((float)((ay *ay )+(az *az )));
00000a  4c47              LDR      r4,|L3.296|
00000c  2022              MOVS     r0,#0x22
00000e  2124              MOVS     r1,#0x24
000010  5e20              LDRSH    r0,[r4,r0]  ; ay
000012  5e61              LDRSH    r1,[r4,r1]  ; az
000014  4340              MULS     r0,r0,r0
000016  4349              MULS     r1,r1,r1
000018  1840              ADDS     r0,r0,r1
00001a  f7fffffe          BL       __aeabi_i2f
00001e  f7fffffe          BL       __aeabi_f2d
000022  f7fffffe          BL       sqrt
000026  f7fffffe          BL       __aeabi_d2f
00002a  4606              MOV      r6,r0
;;;642    	s2 = sqrt((float)((ax *ax )+(az *az )));
00002c  2020              MOVS     r0,#0x20
00002e  2124              MOVS     r1,#0x24
000030  5e20              LDRSH    r0,[r4,r0]  ; ax
000032  5e61              LDRSH    r1,[r4,r1]  ; az
000034  4340              MULS     r0,r0,r0
000036  4349              MULS     r1,r1,r1
000038  1840              ADDS     r0,r0,r1
00003a  f7fffffe          BL       __aeabi_i2f
00003e  f7fffffe          BL       __aeabi_f2d
000042  f7fffffe          BL       sqrt
000046  f7fffffe          BL       __aeabi_d2f
00004a  4605              MOV      r5,r0
;;;643    
;;;644    	PitchAng = atan(ax /s1)*180/PI;
00004c  2020              MOVS     r0,#0x20
00004e  5e20              LDRSH    r0,[r4,r0]  ; ax
000050  f7fffffe          BL       __aeabi_i2f
000054  4631              MOV      r1,r6
000056  f7fffffe          BL       __aeabi_fdiv
00005a  f7fffffe          BL       __aeabi_f2d
00005e  f7fffffe          BL       atan
000062  4e32              LDR      r6,|L3.300|
000064  2200              MOVS     r2,#0
000066  4633              MOV      r3,r6
000068  f7fffffe          BL       __aeabi_dmul
00006c  2703              MOVS     r7,#3
00006e  077f              LSLS     r7,r7,#29
000070  463a              MOV      r2,r7
000072  4b2f              LDR      r3,|L3.304|
000074  f7fffffe          BL       __aeabi_ddiv
000078  f7fffffe          BL       __aeabi_d2f
;;;645    	RollAng = atan(ay /s2)*180/PI;
00007c  62e0              STR      r0,[r4,#0x2c]  ; PitchAng
00007e  2022              MOVS     r0,#0x22
000080  5e20              LDRSH    r0,[r4,r0]  ; ay
000082  f7fffffe          BL       __aeabi_i2f
000086  4629              MOV      r1,r5
000088  f7fffffe          BL       __aeabi_fdiv
00008c  f7fffffe          BL       __aeabi_f2d
000090  f7fffffe          BL       atan
000094  2200              MOVS     r2,#0
000096  4633              MOV      r3,r6
000098  f7fffffe          BL       __aeabi_dmul
00009c  463a              MOV      r2,r7
00009e  4b24              LDR      r3,|L3.304|
0000a0  f7fffffe          BL       __aeabi_ddiv
0000a4  f7fffffe          BL       __aeabi_d2f
0000a8  4605              MOV      r5,r0
;;;646    
;;;647    //	PitchAng = atan(ax /s1)*57.295779;
;;;648    //	RollAng = atan(ay /s2)*57.295779;
;;;649    
;;;650    	#if defined (ENABLE_KALMAN_FILTER)
;;;651    	angle_dot = gx*GYRO_SCALE;	
0000aa  62a0              STR      r0,[r4,#0x28]  ; RollAng
0000ac  201a              MOVS     r0,#0x1a
0000ae  5e20              LDRSH    r0,[r4,r0]  ; gx
0000b0  f7fffffe          BL       __aeabi_i2f
;;;652    	kalman_filter(RollAng, angle_dot, &f_angle, &f_angle_dot);
0000b4  4623              MOV      r3,r4
0000b6  3338              ADDS     r3,r3,#0x38
0000b8  4601              MOV      r1,r0
0000ba  6320              STR      r0,[r4,#0x30]  ; angle_dot
0000bc  1f1a              SUBS     r2,r3,#4
0000be  4628              MOV      r0,r5
0000c0  f7fffffe          BL       kalman_filter
;;;653    	#endif
;;;654    
;;;655    	#if 1	//debug
;;;656    
;;;657    	if (FlagSwitch)
0000c4  7820              LDRB     r0,[r4,#0]  ; FlagSwitch
0000c6  2800              CMP      r0,#0
0000c8  d012              BEQ      |L3.240|
;;;658    	{
;;;659    		printf("Acc:%5d,%5d,%5d,",ax ,ay ,az );
0000ca  2324              MOVS     r3,#0x24
0000cc  2222              MOVS     r2,#0x22
0000ce  2120              MOVS     r1,#0x20
0000d0  5ee3              LDRSH    r3,[r4,r3]  ; az
0000d2  5ea2              LDRSH    r2,[r4,r2]  ; ay
0000d4  5e61              LDRSH    r1,[r4,r1]  ; ax
0000d6  a017              ADR      r0,|L3.308|
0000d8  f7fffffe          BL       __2printf
;;;660    		printf("Gyro:%5d,%5d,%5d,",gx ,gy ,gz );	
0000dc  231e              MOVS     r3,#0x1e
0000de  221c              MOVS     r2,#0x1c
0000e0  211a              MOVS     r1,#0x1a
0000e2  5ee3              LDRSH    r3,[r4,r3]  ; gz
0000e4  5ea2              LDRSH    r2,[r4,r2]  ; gy
0000e6  5e61              LDRSH    r1,[r4,r1]  ; gx
0000e8  a017              ADR      r0,|L3.328|
0000ea  f7fffffe          BL       __2printf
;;;661    		printf("\r\n");
0000ee  e017              B        |L3.288|
                  |L3.240|
;;;662    	}
;;;663    	else
;;;664    	{		
;;;665    		printf("Pitch:%8.3lf,",PitchAng);
0000f0  6ae0              LDR      r0,[r4,#0x2c]  ; PitchAng
0000f2  f7fffffe          BL       __aeabi_f2d
0000f6  4602              MOV      r2,r0
0000f8  460b              MOV      r3,r1
0000fa  a018              ADR      r0,|L3.348|
0000fc  f7fffffe          BL       __2printf
;;;666    		printf("Roll:%8.3lf,",RollAng);
000100  6aa0              LDR      r0,[r4,#0x28]  ; RollAng
000102  f7fffffe          BL       __aeabi_f2d
000106  4602              MOV      r2,r0
000108  460b              MOV      r3,r1
00010a  a018              ADR      r0,|L3.364|
00010c  f7fffffe          BL       __2printf
;;;667    
;;;668    		#if defined (ENABLE_KALMAN_FILTER)
;;;669    		printf("Angle:%8.3lf,",f_angle);
000110  6b60              LDR      r0,[r4,#0x34]  ; f_angle
000112  f7fffffe          BL       __aeabi_f2d
000116  4602              MOV      r2,r0
000118  460b              MOV      r3,r1
00011a  a018              ADR      r0,|L3.380|
00011c  f7fffffe          BL       __2printf
                  |L3.288|
000120  a01a              ADR      r0,|L3.396|
000122  f7fffffe          BL       __2printf
;;;670    		#endif
;;;671    		
;;;672    		printf("\r\n");
;;;673    	}
;;;674    	
;;;675    	#endif
;;;676    }
000126  bdf8              POP      {r3-r7,pc}
;;;677    
                          ENDP

                  |L3.296|
                          DCD      ||.data||
                  |L3.300|
                          DCD      0x40668000
                  |L3.304|
                          DCD      0x400921fb
                  |L3.308|
000134  4163633a          DCB      "Acc:%5d,%5d,%5d,",0
000138  2535642c
00013c  2535642c
000140  2535642c
000144  00      
000145  00                DCB      0
000146  00                DCB      0
000147  00                DCB      0
                  |L3.328|
000148  4779726f          DCB      "Gyro:%5d,%5d,%5d,",0
00014c  3a253564
000150  2c253564
000154  2c253564
000158  2c00    
00015a  00                DCB      0
00015b  00                DCB      0
                  |L3.348|
00015c  50697463          DCB      "Pitch:%8.3lf,",0
000160  683a2538
000164  2e336c66
000168  2c00    
00016a  00                DCB      0
00016b  00                DCB      0
                  |L3.364|
00016c  526f6c6c          DCB      "Roll:%8.3lf,",0
000170  3a25382e
000174  336c662c
000178  00      
000179  00                DCB      0
00017a  00                DCB      0
00017b  00                DCB      0
                  |L3.380|
00017c  416e676c          DCB      "Angle:%8.3lf,",0
000180  653a2538
000184  2e336c66
000188  2c00    
00018a  00                DCB      0
00018b  00                DCB      0
                  |L3.396|
00018c  0d0a00            DCB      "\r\n",0
00018f  00                DCB      0

                          AREA ||i.Gyroscope_Calibration||, CODE, READONLY, ALIGN=2

                  Gyroscope_Calibration PROC
;;;482    
;;;483    void Gyroscope_Calibration(void)
000000  b500              PUSH     {lr}
;;;484    {
;;;485    	int32_t gyroX = 0;
;;;486    	int32_t gyroY = 0;
;;;487    	int32_t gyroZ = 0;		
;;;488    
;;;489    //	uint16_t integerX = 0;
;;;490    //	uint16_t integerY = 0;	
;;;491    //	uint16_t integerZ = 0;	
;;;492    	
;;;493    	if (Flag_Calibrate)
000002  4811              LDR      r0,|L4.72|
000004  7840              LDRB     r0,[r0,#1]  ; Flag_Calibrate
000006  2800              CMP      r0,#0
000008  d01d              BEQ      |L4.70|
;;;494    	{
;;;495    		gyroX = appLSM6DS3_GetGyroData(AXIS_X);
00000a  2000              MOVS     r0,#0
00000c  f7fffffe          BL       appLSM6DS3_GetGyroData
;;;496    		if (MEMSABS(gyroX)>0)
000010  0041              LSLS     r1,r0,#1
000012  d004              BEQ      |L4.30|
;;;497    		{
;;;498    			appLSM6DS3_SetGyroCalData(AXIS_X,-gyroX);
000014  4240              RSBS     r0,r0,#0
000016  b201              SXTH     r1,r0
000018  2000              MOVS     r0,#0
00001a  f7fffffe          BL       appLSM6DS3_SetGyroCalData
                  |L4.30|
;;;499    
;;;500    		}
;;;501    		gyroY = appLSM6DS3_GetGyroData(AXIS_Y);
00001e  2001              MOVS     r0,#1
000020  f7fffffe          BL       appLSM6DS3_GetGyroData
;;;502    		if (MEMSABS(gyroY)>0)
000024  0041              LSLS     r1,r0,#1
000026  d004              BEQ      |L4.50|
;;;503    		{
;;;504    			appLSM6DS3_SetGyroCalData(AXIS_Y,-gyroY);
000028  4240              RSBS     r0,r0,#0
00002a  b201              SXTH     r1,r0
00002c  2001              MOVS     r0,#1
00002e  f7fffffe          BL       appLSM6DS3_SetGyroCalData
                  |L4.50|
;;;505    
;;;506    		}
;;;507    		gyroZ = appLSM6DS3_GetGyroData(AXIS_Z);
000032  2002              MOVS     r0,#2
000034  f7fffffe          BL       appLSM6DS3_GetGyroData
;;;508    		if (MEMSABS(gyroZ)>0)
000038  0041              LSLS     r1,r0,#1
00003a  d004              BEQ      |L4.70|
;;;509    		{
;;;510    			appLSM6DS3_SetGyroCalData(AXIS_Z,-gyroZ);
00003c  4240              RSBS     r0,r0,#0
00003e  b201              SXTH     r1,r0
000040  2002              MOVS     r0,#2
000042  f7fffffe          BL       appLSM6DS3_SetGyroCalData
                  |L4.70|
;;;511    
;;;512    		}
;;;513    		
;;;514    //		printf("%s : %4d,%4d,%4d\r\n",__FUNCTION__,gyroX,gyroY,gyroZ);
;;;515    	}
;;;516    }
000046  bd00              POP      {pc}
;;;517    
                          ENDP

                  |L4.72|
                          DCD      ||.data||

                          AREA ||i.Gyroscope_filter||, CODE, READONLY, ALIGN=2

                  Gyroscope_filter PROC
;;;595    
;;;596    void Gyroscope_filter(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;597    {
;;;598    	#if defined (ENABLE_AVERAGE_FILTER)	
;;;599    	uint8_t i;
;;;600    	int32_t gx_sum = 0, gy_sum = 0, gz_sum = 0; 
000002  2500              MOVS     r5,#0
;;;601    
;;;602    	for(i = 1 ; i < FILTER_COUNT; i++)
;;;603    	{
;;;604    		gx_buf[i - 1] = gx_buf[i];
000004  4f1e              LDR      r7,|L5.128|
000006  462c              MOV      r4,r5                 ;600
000008  462b              MOV      r3,r5                 ;600
00000a  2101              MOVS     r1,#1                 ;602
                  |L5.12|
00000c  0048              LSLS     r0,r1,#1
00000e  19c6              ADDS     r6,r0,r7
000010  5a3a              LDRH     r2,[r7,r0]
000012  3e40              SUBS     r6,r6,#0x40
000014  87f2              STRH     r2,[r6,#0x3e]
;;;605    		gy_buf[i - 1] = gy_buf[i];
000016  4a1a              LDR      r2,|L5.128|
;;;606    		gz_buf[i - 1] = gz_buf[i];
000018  1c49              ADDS     r1,r1,#1
00001a  3220              ADDS     r2,r2,#0x20           ;605
00001c  5a16              LDRH     r6,[r2,r0]            ;605
00001e  1882              ADDS     r2,r0,r2              ;605
000020  3a40              SUBS     r2,r2,#0x40           ;605
000022  87d6              STRH     r6,[r2,#0x3e]         ;605
000024  4e16              LDR      r6,|L5.128|
000026  b2c9              UXTB     r1,r1                 ;602
000028  3640              ADDS     r6,r6,#0x40
00002a  5a32              LDRH     r2,[r6,r0]
00002c  1980              ADDS     r0,r0,r6
00002e  3840              SUBS     r0,r0,#0x40
000030  87c2              STRH     r2,[r0,#0x3e]
000032  2910              CMP      r1,#0x10              ;602
000034  d3ea              BCC      |L5.12|
;;;607    	}
;;;608    
;;;609    	gx_buf[FILTER_COUNT - 1] = appLSM6DS3_GetGyroData(AXIS_X);
000036  2000              MOVS     r0,#0
000038  f7fffffe          BL       appLSM6DS3_GetGyroData
00003c  83f8              STRH     r0,[r7,#0x1e]
;;;610    	gy_buf[FILTER_COUNT - 1] = appLSM6DS3_GetGyroData(AXIS_Y);
00003e  2001              MOVS     r0,#1
000040  f7fffffe          BL       appLSM6DS3_GetGyroData
000044  3e20              SUBS     r6,r6,#0x20
000046  83f0              STRH     r0,[r6,#0x1e]
;;;611    	gz_buf[FILTER_COUNT - 1] = appLSM6DS3_GetGyroData(AXIS_Z);
000048  2002              MOVS     r0,#2
00004a  f7fffffe          BL       appLSM6DS3_GetGyroData
00004e  4631              MOV      r1,r6
000050  3120              ADDS     r1,r1,#0x20
000052  83c8              STRH     r0,[r1,#0x1e]
;;;612    
;;;613    	for(i = 0 ; i < FILTER_COUNT; i++)
000054  2000              MOVS     r0,#0
                  |L5.86|
;;;614    	{
;;;615    		gx_sum += gx_buf[i];
000056  4f0a              LDR      r7,|L5.128|
000058  0042              LSLS     r2,r0,#1
00005a  5ebf              LDRSH    r7,[r7,r2]
;;;616    		gy_sum += gy_buf[i];
;;;617    		gz_sum += gz_buf[i];
00005c  1c40              ADDS     r0,r0,#1
00005e  197d              ADDS     r5,r7,r5              ;615
000060  5eb7              LDRSH    r7,[r6,r2]            ;616
000062  5e8a              LDRSH    r2,[r1,r2]
000064  193c              ADDS     r4,r7,r4              ;616
000066  18d3              ADDS     r3,r2,r3
000068  b2c0              UXTB     r0,r0                 ;613
00006a  2810              CMP      r0,#0x10              ;613
00006c  d3f3              BCC      |L5.86|
;;;618    	}
;;;619    
;;;620    	gx = (int16_t)(gx_sum>>FILTER_FACTOR);// / FILTER_COUNT);
00006e  4805              LDR      r0,|L5.132|
000070  1129              ASRS     r1,r5,#4
000072  8341              STRH     r1,[r0,#0x1a]
;;;621    	gy = (int16_t)(gy_sum>>FILTER_FACTOR);// / FILTER_COUNT);
000074  1121              ASRS     r1,r4,#4
000076  8381              STRH     r1,[r0,#0x1c]
;;;622    	gz = (int16_t)(gz_sum>>FILTER_FACTOR);// / FILTER_COUNT);
000078  1119              ASRS     r1,r3,#4
00007a  83c1              STRH     r1,[r0,#0x1e]
;;;623    
;;;624    	#else
;;;625    	gx = appLSM6DS3_GetGyroData(AXIS_X);
;;;626    	gy = appLSM6DS3_GetGyroData(AXIS_Y);
;;;627    	gz = appLSM6DS3_GetGyroData(AXIS_Z);	
;;;628    
;;;629    	#endif
;;;630    	
;;;631    }
00007c  bdf0              POP      {r4-r7,pc}
;;;632    
                          ENDP

00007e  0000              DCW      0x0000
                  |L5.128|
                          DCD      ||.bss||+0x60
                  |L5.132|
                          DCD      ||.data||

                          AREA ||i.I2C_STOP||, CODE, READONLY, ALIGN=1

                  I2C_STOP PROC
;;;281     */
;;;282    __STATIC_INLINE void I2C_STOP(I2C_T *i2c)
000000  6801              LDR      r1,[r0,#0]
;;;283    {
;;;284    
;;;285        (i2c)->CTL0 |= (I2C_CTL0_SI_Msk | I2C_CTL0_STO_Msk);
000002  2218              MOVS     r2,#0x18
000004  4311              ORRS     r1,r1,r2
000006  6001              STR      r1,[r0,#0]
                  |L6.8|
;;;286        while(i2c->CTL0 & I2C_CTL0_STO_Msk) {
000008  6801              LDR      r1,[r0,#0]
00000a  06c9              LSLS     r1,r1,#27
00000c  d4fc              BMI      |L6.8|
;;;287        }
;;;288    }
00000e  4770              BX       lr
;;;289    
                          ENDP


                          AREA ||i.LSM6DS3_Delay||, CODE, READONLY, ALIGN=1

                  LSM6DS3_Delay PROC
;;;38     
;;;39     void LSM6DS3_Delay(uint16_t nCount)
000000  e001              B        |L7.6|
                  |L7.2|
;;;40     {
;;;41         /* Decrement nCount value */
;;;42         while (nCount != 0)
;;;43         {
;;;44             nCount--;
000002  1e40              SUBS     r0,r0,#1
000004  b280              UXTH     r0,r0
                  |L7.6|
000006  2800              CMP      r0,#0                 ;42
000008  d1fb              BNE      |L7.2|
;;;45         }
;;;46     }
00000a  4770              BX       lr
;;;47     
                          ENDP


                          AREA ||i.appLSM6DS3_CommonInit||, CODE, READONLY, ALIGN=1

                  appLSM6DS3_CommonInit PROC
;;;430    
;;;431    void appLSM6DS3_CommonInit(void)
000000  b508              PUSH     {r3,lr}
;;;432    {
;;;433    	uint8_t data;
;;;434    
;;;435    
;;;436    	appLSM6DS3_Read(LSM6DS3_ADDRESS_HIGH, LSM6DS3_XG_CTRL3_C, 1,&data);
000002  466b              MOV      r3,sp
000004  2201              MOVS     r2,#1
000006  2112              MOVS     r1,#0x12
000008  20d6              MOVS     r0,#0xd6
00000a  f7fffffe          BL       appLSM6DS3_Read
;;;437    	LSM6DS3_Delay(5);	
00000e  2005              MOVS     r0,#5
000010  f7fffffe          BL       LSM6DS3_Delay
;;;438    
;;;439        /* Enable register address automatically incremented during a multiple byte
;;;440           access with a serial interface (I2C or SPI) */
;;;441        data &= ~(LSM6DS3_XG_IF_INC_MASK);
000014  4669              MOV      r1,sp
000016  7808              LDRB     r0,[r1,#0]
000018  21fb              MOVS     r1,#0xfb
00001a  4008              ANDS     r0,r0,r1
;;;442        data |= LSM6DS3_XG_IF_INC;
00001c  2104              MOVS     r1,#4
00001e  4308              ORRS     r0,r0,r1
000020  4669              MOV      r1,sp
000022  7008              STRB     r0,[r1,#0]
;;;443    	
;;;444    	appLSM6DS3_Write(LSM6DS3_ADDRESS_HIGH, LSM6DS3_XG_CTRL3_C, 1,&data);
000024  466b              MOV      r3,sp
000026  2201              MOVS     r2,#1
000028  2112              MOVS     r1,#0x12
00002a  20d6              MOVS     r0,#0xd6
00002c  f7fffffe          BL       appLSM6DS3_Write
;;;445    	LSM6DS3_Delay(5);
000030  2005              MOVS     r0,#5
000032  f7fffffe          BL       LSM6DS3_Delay
;;;446    
;;;447    	appLSM6DS3_Read(LSM6DS3_ADDRESS_HIGH, LSM6DS3_XG_FIFO_CTRL5, 1,&data);
000036  466b              MOV      r3,sp
000038  2201              MOVS     r2,#1
00003a  210a              MOVS     r1,#0xa
00003c  20d6              MOVS     r0,#0xd6
00003e  f7fffffe          BL       appLSM6DS3_Read
;;;448    	LSM6DS3_Delay(5);	
000042  2005              MOVS     r0,#5
000044  f7fffffe          BL       LSM6DS3_Delay
;;;449    
;;;450        /* FIFO ODR selection */
;;;451        data &= ~(LSM6DS3_XG_FIFO_ODR_MASK);
000048  4669              MOV      r1,sp
00004a  7808              LDRB     r0,[r1,#0]
00004c  2187              MOVS     r1,#0x87
00004e  4008              ANDS     r0,r0,r1
;;;452        data |= LSM6DS3_XG_FIFO_ODR_NA;
;;;453    
;;;454        /* FIFO mode selection */
;;;455        data &= ~(LSM6DS3_XG_FIFO_MODE_MASK);
000050  08c0              LSRS     r0,r0,#3
000052  00c0              LSLS     r0,r0,#3
;;;456        data |= LSM6DS3_XG_FIFO_MODE_BYPASS;
000054  4669              MOV      r1,sp
000056  7008              STRB     r0,[r1,#0]
;;;457    
;;;458    	appLSM6DS3_Write(LSM6DS3_ADDRESS_HIGH, LSM6DS3_XG_FIFO_CTRL5, 1,&data);
000058  466b              MOV      r3,sp
00005a  2201              MOVS     r2,#1
00005c  210a              MOVS     r1,#0xa
00005e  20d6              MOVS     r0,#0xd6
000060  f7fffffe          BL       appLSM6DS3_Write
;;;459    	LSM6DS3_Delay(5);	
000064  2005              MOVS     r0,#5
000066  f7fffffe          BL       LSM6DS3_Delay
;;;460    	
;;;461    }
00006a  bd08              POP      {r3,pc}
;;;462    
                          ENDP


                          AREA ||i.appLSM6DS3_GetAcc||, CODE, READONLY, ALIGN=2

                  appLSM6DS3_GetAcc PROC
;;;238    
;;;239    void appLSM6DS3_GetAcc(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;240    {
;;;241    	uint8_t tmpxl, tmpxh, tmpyl, tmpyh, tmpzl, tmpzh, tmp;
;;;242    	int16_t ax_s,ay_s,az_s;
;;;243    	uint8_t u8WaitCnt=0;
;;;244        float sensitivity = LSM6DS3_XL_FS_2G_SENSITIVITY;	//default
000002  4d45              LDR      r5,|L9.280|
000004  b087              SUB      sp,sp,#0x1c           ;240
000006  2400              MOVS     r4,#0                 ;243
                  |L9.8|
;;;245    	
;;;246    	do{
;;;247    		appLSM6DS3_Read(ACC_ADDRESS, LSM6DS3_XG_STATUS_REG, 1,&tmp);
000008  466b              MOV      r3,sp
00000a  2201              MOVS     r2,#1
00000c  211e              MOVS     r1,#0x1e
00000e  20d6              MOVS     r0,#0xd6
000010  f7fffffe          BL       appLSM6DS3_Read
;;;248    		if (u8WaitCnt++>30)
000014  4620              MOV      r0,r4
000016  1c64              ADDS     r4,r4,#1
000018  b2e4              UXTB     r4,r4
00001a  281e              CMP      r0,#0x1e
00001c  d803              BHI      |L9.38|
;;;249    			break;
;;;250    	}while(!(tmp&BIT(0)));
00001e  4668              MOV      r0,sp
000020  7800              LDRB     r0,[r0,#0]
000022  07c0              LSLS     r0,r0,#31
000024  d0f0              BEQ      |L9.8|
                  |L9.38|
;;;251    
;;;252    	#if 1	//calculate linear acceleration in mg
;;;253    	appLSM6DS3_Read(ACC_ADDRESS, LSM6DS3_XG_CTRL1_XL, 1,&tmp);
000026  466b              MOV      r3,sp
000028  2201              MOVS     r2,#1
00002a  2110              MOVS     r1,#0x10
00002c  20d6              MOVS     r0,#0xd6
00002e  f7fffffe          BL       appLSM6DS3_Read
;;;254        tmp &= LSM6DS3_XL_FS_MASK;
000032  4669              MOV      r1,sp
000034  7808              LDRB     r0,[r1,#0]
000036  210c              MOVS     r1,#0xc
000038  4008              ANDS     r0,r0,r1
00003a  4669              MOV      r1,sp
00003c  7008              STRB     r0,[r1,#0]
;;;255    //	printf("tmp(A) = 0x%2X\r\n",tmp);//debug
;;;256        switch(tmp)
00003e  d00b              BEQ      |L9.88|
000040  2804              CMP      r0,#4
000042  d008              BEQ      |L9.86|
000044  2808              CMP      r0,#8
000046  d002              BEQ      |L9.78|
000048  280c              CMP      r0,#0xc
00004a  d105              BNE      |L9.88|
00004c  e001              B        |L9.82|
                  |L9.78|
;;;257        {
;;;258          case LSM6DS3_XL_FS_2G:
;;;259            sensitivity = LSM6DS3_XL_FS_2G_SENSITIVITY;
;;;260            break;
;;;261          case LSM6DS3_XL_FS_4G:
;;;262            sensitivity = LSM6DS3_XL_FS_4G_SENSITIVITY;
00004e  4d33              LDR      r5,|L9.284|
;;;263            break;
000050  e002              B        |L9.88|
                  |L9.82|
;;;264          case LSM6DS3_XL_FS_8G:
;;;265            sensitivity = LSM6DS3_XL_FS_8G_SENSITIVITY;
000052  4d33              LDR      r5,|L9.288|
;;;266            break;
000054  e000              B        |L9.88|
                  |L9.86|
;;;267          case LSM6DS3_XL_FS_16G:
;;;268            sensitivity = LSM6DS3_XL_FS_16G_SENSITIVITY;
000056  4d33              LDR      r5,|L9.292|
                  |L9.88|
;;;269            break;
;;;270        }
;;;271    	#endif	
;;;272    
;;;273    	appLSM6DS3_Read(ACC_ADDRESS, LSM6DS3_XG_OUT_X_H_XL, 1, &tmpxh);
000058  ab02              ADD      r3,sp,#8
00005a  2201              MOVS     r2,#1
00005c  2129              MOVS     r1,#0x29
00005e  20d6              MOVS     r0,#0xd6
000060  f7fffffe          BL       appLSM6DS3_Read
;;;274    	appLSM6DS3_Read(ACC_ADDRESS, LSM6DS3_XG_OUT_X_L_XL, 1, &tmpxl);
000064  ab01              ADD      r3,sp,#4
000066  2201              MOVS     r2,#1
000068  2128              MOVS     r1,#0x28
00006a  20d6              MOVS     r0,#0xd6
00006c  f7fffffe          BL       appLSM6DS3_Read
;;;275    	ax_s=(((int16_t) ((tmpxh << 8) | tmpxl)));
000070  4669              MOV      r1,sp
000072  7a08              LDRB     r0,[r1,#8]
000074  7909              LDRB     r1,[r1,#4]
000076  0200              LSLS     r0,r0,#8
000078  4308              ORRS     r0,r0,r1
00007a  b207              SXTH     r7,r0
;;;276    //	printf("ax_s:%d,%d,%d\r\n",ax_s,tmpxh,tmpxl);	//debug
;;;277    
;;;278    	appLSM6DS3_Read(ACC_ADDRESS, LSM6DS3_XG_OUT_Y_H_XL, 1, &tmpyh);
00007c  ab04              ADD      r3,sp,#0x10
00007e  2201              MOVS     r2,#1
000080  212b              MOVS     r1,#0x2b
000082  20d6              MOVS     r0,#0xd6
000084  f7fffffe          BL       appLSM6DS3_Read
;;;279    	appLSM6DS3_Read(ACC_ADDRESS, LSM6DS3_XG_OUT_Y_L_XL, 1, &tmpyl);
000088  ab03              ADD      r3,sp,#0xc
00008a  2201              MOVS     r2,#1
00008c  212a              MOVS     r1,#0x2a
00008e  20d6              MOVS     r0,#0xd6
000090  f7fffffe          BL       appLSM6DS3_Read
;;;280    	ay_s=(((int16_t) ((tmpyh << 8) | tmpyl)));
000094  4669              MOV      r1,sp
000096  7c08              LDRB     r0,[r1,#0x10]
000098  7b09              LDRB     r1,[r1,#0xc]
00009a  0200              LSLS     r0,r0,#8
00009c  4308              ORRS     r0,r0,r1
00009e  b206              SXTH     r6,r0
;;;281    //	printf("ay_s:%d,%d,%d\r\n",ay_s,tmpyh,tmpyl);	//debug	
;;;282    
;;;283    	appLSM6DS3_Read(ACC_ADDRESS, LSM6DS3_XG_OUT_Z_H_XL, 1, &tmpzh);
0000a0  ab06              ADD      r3,sp,#0x18
0000a2  2201              MOVS     r2,#1
0000a4  212d              MOVS     r1,#0x2d
0000a6  20d6              MOVS     r0,#0xd6
0000a8  f7fffffe          BL       appLSM6DS3_Read
;;;284    	appLSM6DS3_Read(ACC_ADDRESS, LSM6DS3_XG_OUT_Z_L_XL, 1, &tmpzl);
0000ac  ab05              ADD      r3,sp,#0x14
0000ae  2201              MOVS     r2,#1
0000b0  212c              MOVS     r1,#0x2c
0000b2  20d6              MOVS     r0,#0xd6
0000b4  f7fffffe          BL       appLSM6DS3_Read
;;;285    	az_s=(((int16_t) ((tmpzh << 8) | tmpzl)));
0000b8  4669              MOV      r1,sp
0000ba  7e08              LDRB     r0,[r1,#0x18]
0000bc  7d09              LDRB     r1,[r1,#0x14]
0000be  0200              LSLS     r0,r0,#8
0000c0  4308              ORRS     r0,r0,r1
0000c2  b204              SXTH     r4,r0
;;;286    //	printf("az_s:%d,%d,%d\r\n",az_s,tmpzh,tmpzl);	//debug	
;;;287    
;;;288    	appLSM6DS3_SetAccData(AXIS_X,(int16_t)(ax_s*sensitivity));	
0000c4  4638              MOV      r0,r7
0000c6  f7fffffe          BL       __aeabi_i2f
0000ca  4629              MOV      r1,r5
0000cc  f7fffffe          BL       __aeabi_fmul
0000d0  f7fffffe          BL       __aeabi_f2iz
0000d4  b201              SXTH     r1,r0
0000d6  2000              MOVS     r0,#0
0000d8  f7fffffe          BL       appLSM6DS3_SetAccData
;;;289    	appLSM6DS3_SetAccData(AXIS_Y,(int16_t)(ay_s*sensitivity));	
0000dc  4630              MOV      r0,r6
0000de  f7fffffe          BL       __aeabi_i2f
0000e2  4629              MOV      r1,r5
0000e4  f7fffffe          BL       __aeabi_fmul
0000e8  f7fffffe          BL       __aeabi_f2iz
0000ec  b201              SXTH     r1,r0
0000ee  2001              MOVS     r0,#1
0000f0  f7fffffe          BL       appLSM6DS3_SetAccData
;;;290    	appLSM6DS3_SetAccData(AXIS_Z,(int16_t)(az_s*sensitivity));	
0000f4  4620              MOV      r0,r4
0000f6  f7fffffe          BL       __aeabi_i2f
0000fa  4629              MOV      r1,r5
0000fc  f7fffffe          BL       __aeabi_fmul
000100  f7fffffe          BL       __aeabi_f2iz
000104  b201              SXTH     r1,r0
000106  2002              MOVS     r0,#2
000108  f7fffffe          BL       appLSM6DS3_SetAccData
;;;291    
;;;292    	LSM6DS3_Delay(5);
00010c  2005              MOVS     r0,#5
00010e  f7fffffe          BL       LSM6DS3_Delay
;;;293    }
000112  b007              ADD      sp,sp,#0x1c
000114  bdf0              POP      {r4-r7,pc}
;;;294    
                          ENDP

000116  0000              DCW      0x0000
                  |L9.280|
                          DCD      0x3d79db23
                  |L9.284|
                          DCD      0x3df9db23
                  |L9.288|
                          DCD      0x3e79db23
                  |L9.292|
                          DCD      0x3ef9db23

                          AREA ||i.appLSM6DS3_GetAccData||, CODE, READONLY, ALIGN=2

                  appLSM6DS3_GetAccData PROC
;;;193    
;;;194    int16_t appLSM6DS3_GetAccData(AXIS_TypeDef axis)
000000  4601              MOV      r1,r0
;;;195    {
;;;196    	int16_t data = 0;
000002  2000              MOVS     r0,#0
;;;197    	
;;;198    	switch(axis)
;;;199    	{
;;;200    		case AXIS_X:
;;;201    			data = LSM6DS3_ACCx + cLSM6DS3_ACCx; 
000004  4a08              LDR      r2,|L10.40|
000006  2900              CMP      r1,#0                 ;198
000008  d008              BEQ      |L10.28|
00000a  2901              CMP      r1,#1                 ;198
00000c  d009              BEQ      |L10.34|
00000e  2902              CMP      r1,#2                 ;198
000010  d103              BNE      |L10.26|
;;;202    			break;
;;;203    
;;;204    		case AXIS_Y:
;;;205    			data = LSM6DS3_ACCy + cLSM6DS3_ACCy; 
;;;206    			break;
;;;207    
;;;208    		case AXIS_Z:
;;;209    			data = LSM6DS3_ACCz + cLSM6DS3_ACCz; 
000012  8a50              LDRH     r0,[r2,#0x12]  ; LSM6DS3_ACCz
000014  88d1              LDRH     r1,[r2,#6]  ; cLSM6DS3_ACCz
                  |L10.22|
000016  1840              ADDS     r0,r0,r1
000018  b200              SXTH     r0,r0
                  |L10.26|
;;;210    			break;				
;;;211    	}
;;;212    	
;;;213    	return data ;
;;;214    }
00001a  4770              BX       lr
                  |L10.28|
00001c  89d0              LDRH     r0,[r2,#0xe]          ;201  ; LSM6DS3_ACCx
00001e  8851              LDRH     r1,[r2,#2]            ;201  ; cLSM6DS3_ACCx
000020  e7f9              B        |L10.22|
                  |L10.34|
000022  8a10              LDRH     r0,[r2,#0x10]         ;205  ; LSM6DS3_ACCy
000024  8891              LDRH     r1,[r2,#4]            ;205  ; cLSM6DS3_ACCy
000026  e7f6              B        |L10.22|
;;;215    
                          ENDP

                  |L10.40|
                          DCD      ||.data||

                          AREA ||i.appLSM6DS3_GetData||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  appLSM6DS3_GetData PROC
;;;469    
;;;470    void appLSM6DS3_GetData(void)
000000  b5fe              PUSH     {r1-r7,lr}
;;;471    {
;;;472    	appLSM6DS3_GetAcc();
000002  f7fffffe          BL       appLSM6DS3_GetAcc
;;;473    	appLSM6DS3_GetGyro();
000006  f7fffffe          BL       appLSM6DS3_GetGyro
;;;474    
;;;475    	#if 1	//debug
;;;476    	printf("ACC:%5d,%5d,%5d, GYRO:%5d,%5d,%5d\r\n",
00000a  2002              MOVS     r0,#2
00000c  f7fffffe          BL       appLSM6DS3_GetGyroData
000010  4607              MOV      r7,r0
000012  2001              MOVS     r0,#1
000014  f7fffffe          BL       appLSM6DS3_GetGyroData
000018  4606              MOV      r6,r0
00001a  2000              MOVS     r0,#0
00001c  f7fffffe          BL       appLSM6DS3_GetGyroData
000020  4605              MOV      r5,r0
000022  2002              MOVS     r0,#2
000024  f7fffffe          BL       appLSM6DS3_GetAccData
000028  4603              MOV      r3,r0
00002a  2001              MOVS     r0,#1
00002c  f7fffffe          BL       appLSM6DS3_GetAccData
000030  4604              MOV      r4,r0
000032  2000              MOVS     r0,#0
000034  f7fffffe          BL       appLSM6DS3_GetAccData
000038  4622              MOV      r2,r4
00003a  466c              MOV      r4,sp
00003c  c4e0              STM      r4!,{r5-r7}
00003e  4601              MOV      r1,r0
000040  a001              ADR      r0,|L11.72|
000042  f7fffffe          BL       __2printf
;;;477    				appLSM6DS3_GetAccData(AXIS_X),appLSM6DS3_GetAccData(AXIS_Y),appLSM6DS3_GetAccData(AXIS_Z),
;;;478    				appLSM6DS3_GetGyroData(AXIS_X),appLSM6DS3_GetGyroData(AXIS_Y),appLSM6DS3_GetGyroData(AXIS_Z));
;;;479    	#endif
;;;480    }	
000046  bdfe              POP      {r1-r7,pc}
;;;481    
                          ENDP

                  |L11.72|
000048  4143433a          DCB      "ACC:%5d,%5d,%5d, GYRO:%5d,%5d,%5d\r\n",0
00004c  2535642c
000050  2535642c
000054  2535642c
000058  20475952
00005c  4f3a2535
000060  642c2535
000064  642c2535
000068  640d0a00

                          AREA ||i.appLSM6DS3_GetGyro||, CODE, READONLY, ALIGN=2

                  appLSM6DS3_GetGyro PROC
;;;294    
;;;295    void appLSM6DS3_GetGyro(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;296    {
;;;297    	uint8_t tmpxl, tmpxh, tmpyl, tmpyh, tmpzl, tmpzh, tmp;
;;;298    	int16_t gx_s,gy_s,gz_s;
;;;299    	uint8_t u8WaitCnt=0;
;;;300        float sensitivity = LSM6DS3_G_FS_125_SENSITIVITY;	//default
000002  4d4f              LDR      r5,|L12.320|
000004  b087              SUB      sp,sp,#0x1c           ;296
000006  2400              MOVS     r4,#0                 ;299
                  |L12.8|
;;;301        
;;;302    	do{
;;;303    		appLSM6DS3_Read(GYRO_ADDRESS, LSM6DS3_XG_STATUS_REG, 1,&tmp);
000008  466b              MOV      r3,sp
00000a  2201              MOVS     r2,#1
00000c  211e              MOVS     r1,#0x1e
00000e  20d6              MOVS     r0,#0xd6
000010  f7fffffe          BL       appLSM6DS3_Read
000014  1c64              ADDS     r4,r4,#1
;;;304    		u8WaitCnt++;
000016  b2e4              UXTB     r4,r4
;;;305    		if (u8WaitCnt>30)
000018  2c1e              CMP      r4,#0x1e
00001a  d803              BHI      |L12.36|
;;;306    			break;
;;;307    	}while(!(tmp&BIT(1)));
00001c  4668              MOV      r0,sp
00001e  7800              LDRB     r0,[r0,#0]
000020  0780              LSLS     r0,r0,#30
000022  d5f1              BPL      |L12.8|
                  |L12.36|
;;;308    
;;;309    	#if 1	//calculate angular rate in mdps
;;;310    	appLSM6DS3_Read(GYRO_ADDRESS, LSM6DS3_XG_CTRL2_G, 1,&tmp);
000024  466b              MOV      r3,sp
000026  2201              MOVS     r2,#1
000028  2111              MOVS     r1,#0x11
00002a  20d6              MOVS     r0,#0xd6
00002c  f7fffffe          BL       appLSM6DS3_Read
;;;311        tmp &= LSM6DS3_G_FS_MASK;
000030  4669              MOV      r1,sp
000032  7808              LDRB     r0,[r1,#0]
000034  210e              MOVS     r1,#0xe
000036  4008              ANDS     r0,r0,r1
000038  4669              MOV      r1,sp
00003a  7008              STRB     r0,[r1,#0]
;;;312    //	printf("tmp(G) = 0x%2X\r\n",tmp);//debug
;;;313        switch(tmp)
00003c  2804              CMP      r0,#4
00003e  d00a              BEQ      |L12.86|
000040  dc02              BGT      |L12.72|
000042  2800              CMP      r0,#0
000044  d10c              BNE      |L12.96|
000046  e004              B        |L12.82|
                  |L12.72|
000048  2808              CMP      r0,#8
00004a  d006              BEQ      |L12.90|
00004c  280c              CMP      r0,#0xc
00004e  d107              BNE      |L12.96|
000050  e005              B        |L12.94|
                  |L12.82|
;;;314        {
;;;315          case LSM6DS3_G_FS_125:
;;;316            sensitivity = LSM6DS3_G_FS_125_SENSITIVITY;
;;;317            break;
;;;318          case LSM6DS3_G_FS_245:
;;;319            sensitivity = LSM6DS3_G_FS_245_SENSITIVITY;
000052  4d3c              LDR      r5,|L12.324|
;;;320            break;
000054  e004              B        |L12.96|
                  |L12.86|
;;;321          case LSM6DS3_G_FS_500:
;;;322            sensitivity = LSM6DS3_G_FS_500_SENSITIVITY;
000056  4d3c              LDR      r5,|L12.328|
;;;323            break;
000058  e002              B        |L12.96|
                  |L12.90|
;;;324          case LSM6DS3_G_FS_1000:
;;;325            sensitivity = LSM6DS3_G_FS_1000_SENSITIVITY;
00005a  4d3c              LDR      r5,|L12.332|
;;;326            break;
00005c  e000              B        |L12.96|
                  |L12.94|
;;;327          case LSM6DS3_G_FS_2000:
;;;328            sensitivity = LSM6DS3_G_FS_2000_SENSITIVITY;
00005e  4d3c              LDR      r5,|L12.336|
                  |L12.96|
;;;329            break;
;;;330        }
;;;331    	#endif	
;;;332    
;;;333    	appLSM6DS3_Read(GYRO_ADDRESS, LSM6DS3_XG_OUT_X_H_G, 1, &tmpxh);
000060  ab02              ADD      r3,sp,#8
000062  2201              MOVS     r2,#1
000064  2123              MOVS     r1,#0x23
000066  20d6              MOVS     r0,#0xd6
000068  f7fffffe          BL       appLSM6DS3_Read
;;;334    	appLSM6DS3_Read(GYRO_ADDRESS, LSM6DS3_XG_OUT_X_L_G, 1, &tmpxl);
00006c  ab01              ADD      r3,sp,#4
00006e  2201              MOVS     r2,#1
000070  2122              MOVS     r1,#0x22
000072  20d6              MOVS     r0,#0xd6
000074  f7fffffe          BL       appLSM6DS3_Read
;;;335    	gx_s=( (((int16_t)(tmpxh << 8)) | ((int16_t)tmpxl)));
000078  4668              MOV      r0,sp
00007a  7a00              LDRB     r0,[r0,#8]
;;;336    
;;;337    	appLSM6DS3_Read(GYRO_ADDRESS, LSM6DS3_XG_OUT_Y_H_G, 1, &tmpyh);
00007c  ab04              ADD      r3,sp,#0x10
00007e  0200              LSLS     r0,r0,#8              ;335
000080  b207              SXTH     r7,r0                 ;335
000082  4668              MOV      r0,sp                 ;335
000084  7900              LDRB     r0,[r0,#4]            ;335
000086  2201              MOVS     r2,#1
000088  4307              ORRS     r7,r7,r0              ;335
00008a  2125              MOVS     r1,#0x25
00008c  20d6              MOVS     r0,#0xd6
00008e  f7fffffe          BL       appLSM6DS3_Read
;;;338    	appLSM6DS3_Read(GYRO_ADDRESS, LSM6DS3_XG_OUT_Y_L_G, 1, &tmpyl);
000092  ab03              ADD      r3,sp,#0xc
000094  2201              MOVS     r2,#1
000096  2124              MOVS     r1,#0x24
000098  20d6              MOVS     r0,#0xd6
00009a  f7fffffe          BL       appLSM6DS3_Read
;;;339    	gy_s=( (((int16_t)(tmpyh << 8)) | ((int16_t)tmpyl)));	
00009e  4668              MOV      r0,sp
0000a0  7c00              LDRB     r0,[r0,#0x10]
;;;340    
;;;341    	appLSM6DS3_Read(GYRO_ADDRESS, LSM6DS3_XG_OUT_Z_H_G, 1, &tmpzh);
0000a2  ab06              ADD      r3,sp,#0x18
0000a4  0200              LSLS     r0,r0,#8              ;339
0000a6  b206              SXTH     r6,r0                 ;339
0000a8  4668              MOV      r0,sp                 ;339
0000aa  7b00              LDRB     r0,[r0,#0xc]          ;339
0000ac  2201              MOVS     r2,#1
0000ae  4306              ORRS     r6,r6,r0              ;339
0000b0  2127              MOVS     r1,#0x27
0000b2  20d6              MOVS     r0,#0xd6
0000b4  f7fffffe          BL       appLSM6DS3_Read
;;;342    	appLSM6DS3_Read(GYRO_ADDRESS, LSM6DS3_XG_OUT_Z_L_G, 1, &tmpzl);
0000b8  ab05              ADD      r3,sp,#0x14
0000ba  2201              MOVS     r2,#1
0000bc  2126              MOVS     r1,#0x26
0000be  20d6              MOVS     r0,#0xd6
0000c0  f7fffffe          BL       appLSM6DS3_Read
;;;343    	gz_s=( (((int16_t)(tmpzh << 8)) | ((int16_t)tmpzl)));	
0000c4  4668              MOV      r0,sp
0000c6  7e00              LDRB     r0,[r0,#0x18]
0000c8  0200              LSLS     r0,r0,#8
0000ca  b204              SXTH     r4,r0
0000cc  4668              MOV      r0,sp
0000ce  7d00              LDRB     r0,[r0,#0x14]
0000d0  4304              ORRS     r4,r4,r0
;;;344    
;;;345    	appLSM6DS3_SetGyroData(AXIS_X,(int16_t)(gx_s*sensitivity)/1000);	
0000d2  4638              MOV      r0,r7
0000d4  f7fffffe          BL       __aeabi_i2f
0000d8  4629              MOV      r1,r5
0000da  f7fffffe          BL       __aeabi_fmul
0000de  f7fffffe          BL       __aeabi_f2iz
0000e2  277d              MOVS     r7,#0x7d
0000e4  00ff              LSLS     r7,r7,#3
0000e6  b200              SXTH     r0,r0
0000e8  4639              MOV      r1,r7
0000ea  f7fffffe          BL       __aeabi_idivmod
0000ee  b201              SXTH     r1,r0
0000f0  2000              MOVS     r0,#0
0000f2  f7fffffe          BL       appLSM6DS3_SetGyroData
;;;346    	appLSM6DS3_SetGyroData(AXIS_Y,(int16_t)(gy_s*sensitivity)/1000);	
0000f6  4630              MOV      r0,r6
0000f8  f7fffffe          BL       __aeabi_i2f
0000fc  4629              MOV      r1,r5
0000fe  f7fffffe          BL       __aeabi_fmul
000102  f7fffffe          BL       __aeabi_f2iz
000106  b200              SXTH     r0,r0
000108  4639              MOV      r1,r7
00010a  f7fffffe          BL       __aeabi_idivmod
00010e  b201              SXTH     r1,r0
000110  2001              MOVS     r0,#1
000112  f7fffffe          BL       appLSM6DS3_SetGyroData
;;;347    	appLSM6DS3_SetGyroData(AXIS_Z,(int16_t)(gz_s*sensitivity)/1000);	
000116  4620              MOV      r0,r4
000118  f7fffffe          BL       __aeabi_i2f
00011c  4629              MOV      r1,r5
00011e  f7fffffe          BL       __aeabi_fmul
000122  f7fffffe          BL       __aeabi_f2iz
000126  b200              SXTH     r0,r0
000128  4639              MOV      r1,r7
00012a  f7fffffe          BL       __aeabi_idivmod
00012e  b201              SXTH     r1,r0
000130  2002              MOVS     r0,#2
000132  f7fffffe          BL       appLSM6DS3_SetGyroData
;;;348    
;;;349    	LSM6DS3_Delay(5);
000136  2005              MOVS     r0,#5
000138  f7fffffe          BL       LSM6DS3_Delay
;;;350    }
00013c  b007              ADD      sp,sp,#0x1c
00013e  bdf0              POP      {r4-r7,pc}
;;;351    
                          ENDP

                  |L12.320|
                          DCD      0x408c0000
                  |L12.324|
                          DCD      0x410c0000
                  |L12.328|
                          DCD      0x418c0000
                  |L12.332|
                          DCD      0x420c0000
                  |L12.336|
                          DCD      0x428c0000

                          AREA ||i.appLSM6DS3_GetGyroData||, CODE, READONLY, ALIGN=2

                  appLSM6DS3_GetGyroData PROC
;;;215    
;;;216    int16_t appLSM6DS3_GetGyroData(AXIS_TypeDef axis)
000000  4601              MOV      r1,r0
;;;217    {
;;;218    	int16_t data = 0;
000002  2000              MOVS     r0,#0
;;;219    	
;;;220    	switch(axis)
;;;221    	{
;;;222    		case AXIS_X:
;;;223    			data = LSM6DS3_GYROx + cLSM6DS3_GYROx; 
000004  4a08              LDR      r2,|L13.40|
000006  2900              CMP      r1,#0                 ;220
000008  d008              BEQ      |L13.28|
00000a  2901              CMP      r1,#1                 ;220
00000c  d009              BEQ      |L13.34|
00000e  2902              CMP      r1,#2                 ;220
000010  d103              BNE      |L13.26|
;;;224    			break;
;;;225    
;;;226    		case AXIS_Y:
;;;227    			data = LSM6DS3_GYROy + cLSM6DS3_GYROy; 
;;;228    			break;
;;;229    
;;;230    		case AXIS_Z:
;;;231    			data = LSM6DS3_GYROz + cLSM6DS3_GYROz; 
000012  8b10              LDRH     r0,[r2,#0x18]  ; LSM6DS3_GYROz
000014  8991              LDRH     r1,[r2,#0xc]  ; cLSM6DS3_GYROz
                  |L13.22|
000016  1840              ADDS     r0,r0,r1
000018  b200              SXTH     r0,r0
                  |L13.26|
;;;232    			break;				
;;;233    	}
;;;234    	
;;;235    	return data ;
;;;236    }
00001a  4770              BX       lr
                  |L13.28|
00001c  8a90              LDRH     r0,[r2,#0x14]         ;223  ; LSM6DS3_GYROx
00001e  8911              LDRH     r1,[r2,#8]            ;223  ; cLSM6DS3_GYROx
000020  e7f9              B        |L13.22|
                  |L13.34|
000022  8ad0              LDRH     r0,[r2,#0x16]         ;227  ; LSM6DS3_GYROy
000024  8951              LDRH     r1,[r2,#0xa]          ;227  ; cLSM6DS3_GYROy
000026  e7f6              B        |L13.22|
;;;237    
                          ENDP

                  |L13.40|
                          DCD      ||.data||

                          AREA ||i.appLSM6DS3_Read||, CODE, READONLY, ALIGN=2

                  appLSM6DS3_Read PROC
;;;47     
;;;48     void appLSM6DS3_Read(uint8_t DeviceAddr, uint8_t RegisterAddr,
000000  b570              PUSH     {r4-r6,lr}
;;;49                                   uint16_t NumByteToRead,
;;;50                                   uint8_t* pBuffer)
;;;51     {
000002  4604              MOV      r4,r0
;;;52     	#if 1
;;;53     	uint8_t i, tmp;
;;;54     	I2C_T *i2c = I2C0;
000004  481d              LDR      r0,|L14.124|
;;;55     	
;;;56     	I2C_START(i2c);                         			//Start
000006  6805              LDR      r5,[r0,#0]
000008  2628              MOVS     r6,#0x28
00000a  4335              ORRS     r5,r5,r6
00000c  6005              STR      r5,[r0,#0]
                  |L14.14|
;;;57     	I2C_WAIT_READY(i2c);
00000e  6805              LDR      r5,[r0,#0]
000010  072d              LSLS     r5,r5,#28
000012  d5fc              BPL      |L14.14|
;;;58     
;;;59     	I2C_SET_DATA(i2c, DeviceAddr);             		//send slave address+W
000014  6084              STR      r4,[r0,#8]
;;;60     	I2C_SET_CONTROL_REG(i2c, I2C_CTL_SI);
000016  6806              LDR      r6,[r0,#0]
000018  253c              MOVS     r5,#0x3c
00001a  43ae              BICS     r6,r6,r5
00001c  3608              ADDS     r6,r6,#8
00001e  6006              STR      r6,[r0,#0]
                  |L14.32|
;;;61     	I2C_WAIT_READY(i2c);
000020  6806              LDR      r6,[r0,#0]
000022  0736              LSLS     r6,r6,#28
000024  d5fc              BPL      |L14.32|
;;;62     
;;;63     	I2C_SET_DATA(i2c, RegisterAddr);             		//send index
000026  6081              STR      r1,[r0,#8]
;;;64     	I2C_SET_CONTROL_REG(i2c, I2C_CTL_SI);
000028  6801              LDR      r1,[r0,#0]
00002a  43a9              BICS     r1,r1,r5
00002c  3108              ADDS     r1,r1,#8
00002e  6001              STR      r1,[r0,#0]
                  |L14.48|
;;;65     	I2C_WAIT_READY(i2c);
000030  6801              LDR      r1,[r0,#0]
000032  0709              LSLS     r1,r1,#28
000034  d5fc              BPL      |L14.48|
;;;66     
;;;67     	I2C_SET_CONTROL_REG(i2c, I2C_CTL_STA_SI);		//Start
000036  6801              LDR      r1,[r0,#0]
000038  43a9              BICS     r1,r1,r5
00003a  3128              ADDS     r1,r1,#0x28
00003c  6001              STR      r1,[r0,#0]
                  |L14.62|
;;;68     	I2C_WAIT_READY(i2c);
00003e  6801              LDR      r1,[r0,#0]
000040  0709              LSLS     r1,r1,#28
000042  d5fc              BPL      |L14.62|
000044  1c64              ADDS     r4,r4,#1
;;;69     
;;;70     	I2C_SET_DATA(i2c, (DeviceAddr+1));    			//send slave address+R
000046  6084              STR      r4,[r0,#8]
;;;71     	I2C_SET_CONTROL_REG(i2c, I2C_CTL_SI);
000048  6801              LDR      r1,[r0,#0]
00004a  43a9              BICS     r1,r1,r5
00004c  3108              ADDS     r1,r1,#8
00004e  6001              STR      r1,[r0,#0]
                  |L14.80|
;;;72     	I2C_WAIT_READY(i2c);
000050  6801              LDR      r1,[r0,#0]
000052  0709              LSLS     r1,r1,#28
000054  d5fc              BPL      |L14.80|
;;;73     
;;;74     	for (i=0; i<NumByteToRead; i++)
000056  2100              MOVS     r1,#0
000058  e00a              B        |L14.112|
                  |L14.90|
;;;75     	{
;;;76     		I2C_SET_CONTROL_REG(i2c, I2C_CTL_SI);
00005a  6804              LDR      r4,[r0,#0]
00005c  43ac              BICS     r4,r4,r5
00005e  3408              ADDS     r4,r4,#8
000060  6004              STR      r4,[r0,#0]
                  |L14.98|
;;;77     		I2C_WAIT_READY(i2c);
000062  6804              LDR      r4,[r0,#0]
000064  0724              LSLS     r4,r4,#28
000066  d5fc              BPL      |L14.98|
;;;78     		tmp = I2C_GET_DATA(i2c);           			//read data
000068  6884              LDR      r4,[r0,#8]
;;;79     		pBuffer[i]=tmp;
00006a  545c              STRB     r4,[r3,r1]
00006c  1c49              ADDS     r1,r1,#1
00006e  b2c9              UXTB     r1,r1                 ;74
                  |L14.112|
000070  4291              CMP      r1,r2                 ;74
000072  d3f2              BCC      |L14.90|
;;;80     	}
;;;81     	I2C_STOP(i2c);									//Stop
000074  f7fffffe          BL       I2C_STOP
;;;82     
;;;83     	#else
;;;84     	I2C_ReadMultiBytesOneReg(I2C0, DeviceAddr, RegisterAddr, pBuffer, NumByteToRead);	
;;;85     	#endif
;;;86     }
000078  bd70              POP      {r4-r6,pc}
;;;87     
                          ENDP

00007a  0000              DCW      0x0000
                  |L14.124|
                          DCD      0x40080000

                          AREA ||i.appLSM6DS3_SetACC||, CODE, READONLY, ALIGN=1

                  appLSM6DS3_SetACC PROC
;;;351    
;;;352    void appLSM6DS3_SetACC(void)
000000  b508              PUSH     {r3,lr}
;;;353    {
;;;354    	uint8_t data;
;;;355    
;;;356    	appLSM6DS3_Read(ACC_ADDRESS, LSM6DS3_XG_CTRL1_XL, 1,&data);
000002  466b              MOV      r3,sp
000004  2201              MOVS     r2,#1
000006  2110              MOVS     r1,#0x10
000008  20d6              MOVS     r0,#0xd6
00000a  f7fffffe          BL       appLSM6DS3_Read
;;;357    	LSM6DS3_Delay(5);	
00000e  2005              MOVS     r0,#5
000010  f7fffffe          BL       LSM6DS3_Delay
;;;358    	
;;;359        /* Output Data Rate selection */
;;;360        data &= ~(LSM6DS3_XL_ODR_MASK);
000014  4669              MOV      r1,sp
000016  7808              LDRB     r0,[r1,#0]
;;;361        data |= LSM6DS3_XL_ODR_1K66HZ;
000018  2180              MOVS     r1,#0x80
00001a  0700              LSLS     r0,r0,#28             ;360
00001c  0f00              LSRS     r0,r0,#28             ;360
00001e  4308              ORRS     r0,r0,r1
;;;362    
;;;363        /* Full scale selection */
;;;364        data &= ~(LSM6DS3_XL_FS_MASK);
000020  21f3              MOVS     r1,#0xf3
000022  4008              ANDS     r0,r0,r1
;;;365        data |= LSM6DS3_XL_FS_2G;
000024  4669              MOV      r1,sp
000026  7008              STRB     r0,[r1,#0]
;;;366    	
;;;367    	appLSM6DS3_Write(ACC_ADDRESS, LSM6DS3_XG_CTRL1_XL, 1,&data);
000028  466b              MOV      r3,sp
00002a  2201              MOVS     r2,#1
00002c  2110              MOVS     r1,#0x10
00002e  20d6              MOVS     r0,#0xd6
000030  f7fffffe          BL       appLSM6DS3_Write
;;;368    	LSM6DS3_Delay(5);
000034  2005              MOVS     r0,#5
000036  f7fffffe          BL       LSM6DS3_Delay
;;;369    
;;;370    	appLSM6DS3_Read(ACC_ADDRESS, LSM6DS3_XG_CTRL9_XL, 1,&data);
00003a  466b              MOV      r3,sp
00003c  2201              MOVS     r2,#1
00003e  2118              MOVS     r1,#0x18
000040  20d6              MOVS     r0,#0xd6
000042  f7fffffe          BL       appLSM6DS3_Read
;;;371    	LSM6DS3_Delay(5);	
000046  2005              MOVS     r0,#5
000048  f7fffffe          BL       LSM6DS3_Delay
;;;372    
;;;373        /* Enable X axis selection */
;;;374        data &= ~(LSM6DS3_XL_XEN_MASK);
00004c  4669              MOV      r1,sp
00004e  7808              LDRB     r0,[r1,#0]
000050  21f7              MOVS     r1,#0xf7
000052  4008              ANDS     r0,r0,r1
;;;375        data |= LSM6DS3_XL_XEN_ENABLE;
000054  2108              MOVS     r1,#8
000056  4308              ORRS     r0,r0,r1
;;;376    
;;;377        /* Enable Y axis selection */
;;;378        data &= ~(LSM6DS3_XL_YEN_MASK);
000058  21ef              MOVS     r1,#0xef
00005a  4008              ANDS     r0,r0,r1
;;;379        data |= LSM6DS3_XL_YEN_ENABLE;
00005c  2110              MOVS     r1,#0x10
00005e  4308              ORRS     r0,r0,r1
;;;380    
;;;381        /* Enable Z axis selection */
;;;382        data &= ~(LSM6DS3_XL_ZEN_MASK);
000060  21df              MOVS     r1,#0xdf
000062  4008              ANDS     r0,r0,r1
;;;383        data |= LSM6DS3_XL_ZEN_ENABLE;
000064  2120              MOVS     r1,#0x20
000066  4308              ORRS     r0,r0,r1
000068  4669              MOV      r1,sp
00006a  7008              STRB     r0,[r1,#0]
;;;384    
;;;385    	appLSM6DS3_Write(ACC_ADDRESS, LSM6DS3_XG_CTRL9_XL, 1,&data);
00006c  466b              MOV      r3,sp
00006e  2201              MOVS     r2,#1
000070  2118              MOVS     r1,#0x18
000072  20d6              MOVS     r0,#0xd6
000074  f7fffffe          BL       appLSM6DS3_Write
;;;386    	LSM6DS3_Delay(5);	
000078  2005              MOVS     r0,#5
00007a  f7fffffe          BL       LSM6DS3_Delay
;;;387    	
;;;388    }
00007e  bd08              POP      {r3,pc}
;;;389    
                          ENDP


                          AREA ||i.appLSM6DS3_SetAccCalData||, CODE, READONLY, ALIGN=2

                  appLSM6DS3_SetAccCalData PROC
;;;120    
;;;121    void appLSM6DS3_SetAccCalData(AXIS_TypeDef axis,int16_t data)
000000  4a06              LDR      r2,|L16.28|
;;;122    {
;;;123    	switch(axis)
000002  2800              CMP      r0,#0
000004  d005              BEQ      |L16.18|
000006  2801              CMP      r0,#1
000008  d005              BEQ      |L16.22|
00000a  2802              CMP      r0,#2
00000c  d100              BNE      |L16.16|
;;;124    	{
;;;125    		case AXIS_X:
;;;126    			cLSM6DS3_ACCx = data; 
;;;127    			break;
;;;128    
;;;129    		case AXIS_Y:
;;;130    			cLSM6DS3_ACCy = data; 
;;;131    			break;
;;;132    
;;;133    		case AXIS_Z:
;;;134    			cLSM6DS3_ACCz = data; 
00000e  80d1              STRH     r1,[r2,#6]
                  |L16.16|
;;;135    			break;				
;;;136    	}
;;;137    }
000010  4770              BX       lr
                  |L16.18|
000012  8051              STRH     r1,[r2,#2]            ;126
000014  4770              BX       lr
                  |L16.22|
000016  8091              STRH     r1,[r2,#4]            ;130
000018  4770              BX       lr
;;;138    
                          ENDP

00001a  0000              DCW      0x0000
                  |L16.28|
                          DCD      ||.data||

                          AREA ||i.appLSM6DS3_SetAccData||, CODE, READONLY, ALIGN=2

                  appLSM6DS3_SetAccData PROC
;;;156    
;;;157    void appLSM6DS3_SetAccData(AXIS_TypeDef axis,int16_t data)
000000  4a06              LDR      r2,|L17.28|
;;;158    {
;;;159    	switch(axis)
000002  2800              CMP      r0,#0
000004  d005              BEQ      |L17.18|
000006  2801              CMP      r0,#1
000008  d005              BEQ      |L17.22|
00000a  2802              CMP      r0,#2
00000c  d100              BNE      |L17.16|
;;;160    	{
;;;161    		case AXIS_X:
;;;162    			LSM6DS3_ACCx = data; 
;;;163    			break;
;;;164    
;;;165    		case AXIS_Y:
;;;166    			LSM6DS3_ACCy = data; 
;;;167    			break;
;;;168    
;;;169    		case AXIS_Z:
;;;170    			LSM6DS3_ACCz = data; 
00000e  8251              STRH     r1,[r2,#0x12]
                  |L17.16|
;;;171    			break;				
;;;172    	}
;;;173    }
000010  4770              BX       lr
                  |L17.18|
000012  81d1              STRH     r1,[r2,#0xe]          ;162
000014  4770              BX       lr
                  |L17.22|
000016  8211              STRH     r1,[r2,#0x10]         ;166
000018  4770              BX       lr
;;;174    
                          ENDP

00001a  0000              DCW      0x0000
                  |L17.28|
                          DCD      ||.data||

                          AREA ||i.appLSM6DS3_SetGyro||, CODE, READONLY, ALIGN=1

                  appLSM6DS3_SetGyro PROC
;;;389    
;;;390    void appLSM6DS3_SetGyro(void)
000000  b508              PUSH     {r3,lr}
;;;391    {
;;;392    	uint8_t data;
;;;393    
;;;394    	appLSM6DS3_Read(GYRO_ADDRESS, LSM6DS3_XG_WHO_AM_I_ADDR, 1, &data);
000002  466b              MOV      r3,sp
000004  2201              MOVS     r2,#1
000006  210f              MOVS     r1,#0xf
000008  20d6              MOVS     r0,#0xd6
00000a  f7fffffe          BL       appLSM6DS3_Read
;;;395    	LSM6DS3_Delay(5);
00000e  2005              MOVS     r0,#5
000010  f7fffffe          BL       LSM6DS3_Delay
;;;396    
;;;397    	appLSM6DS3_Read(GYRO_ADDRESS, LSM6DS3_XG_CTRL2_G, 1,&data);
000014  466b              MOV      r3,sp
000016  2201              MOVS     r2,#1
000018  2111              MOVS     r1,#0x11
00001a  20d6              MOVS     r0,#0xd6
00001c  f7fffffe          BL       appLSM6DS3_Read
;;;398    	LSM6DS3_Delay(5);	
000020  2005              MOVS     r0,#5
000022  f7fffffe          BL       LSM6DS3_Delay
;;;399    	
;;;400        /* Output Data Rate selection */
;;;401        data &= ~(LSM6DS3_G_ODR_MASK);
000026  4669              MOV      r1,sp
000028  7808              LDRB     r0,[r1,#0]
;;;402        data |= LSM6DS3_G_ODR_1K66HZ;
00002a  2180              MOVS     r1,#0x80
00002c  0700              LSLS     r0,r0,#28             ;401
00002e  0f00              LSRS     r0,r0,#28             ;401
000030  4308              ORRS     r0,r0,r1
;;;403    
;;;404        /* Full scale selection */
;;;405        data &= ~(LSM6DS3_G_FS_MASK);
000032  21f1              MOVS     r1,#0xf1
000034  4008              ANDS     r0,r0,r1
;;;406        data |= LSM6DS3_G_FS_245;
000036  4669              MOV      r1,sp
000038  7008              STRB     r0,[r1,#0]
;;;407    	
;;;408    	appLSM6DS3_Write(GYRO_ADDRESS, LSM6DS3_XG_CTRL2_G, 1,&data);
00003a  466b              MOV      r3,sp
00003c  2201              MOVS     r2,#1
00003e  2111              MOVS     r1,#0x11
000040  20d6              MOVS     r0,#0xd6
000042  f7fffffe          BL       appLSM6DS3_Write
;;;409    	LSM6DS3_Delay(5);
000046  2005              MOVS     r0,#5
000048  f7fffffe          BL       LSM6DS3_Delay
;;;410    
;;;411    	appLSM6DS3_Read(GYRO_ADDRESS, LSM6DS3_XG_CTRL10_C, 1,&data);
00004c  466b              MOV      r3,sp
00004e  2201              MOVS     r2,#1
000050  2119              MOVS     r1,#0x19
000052  20d6              MOVS     r0,#0xd6
000054  f7fffffe          BL       appLSM6DS3_Read
;;;412    	LSM6DS3_Delay(5);	
000058  2005              MOVS     r0,#5
00005a  f7fffffe          BL       LSM6DS3_Delay
;;;413    
;;;414        /* Enable X axis selection */
;;;415        data &= ~(LSM6DS3_G_XEN_MASK);
00005e  4669              MOV      r1,sp
000060  7808              LDRB     r0,[r1,#0]
000062  21f7              MOVS     r1,#0xf7
000064  4008              ANDS     r0,r0,r1
;;;416        data |= LSM6DS3_G_XEN_ENABLE;
000066  2108              MOVS     r1,#8
000068  4308              ORRS     r0,r0,r1
;;;417    
;;;418        /* Enable Y axis selection */
;;;419        data &= ~(LSM6DS3_G_YEN_MASK);
00006a  21ef              MOVS     r1,#0xef
00006c  4008              ANDS     r0,r0,r1
;;;420        data |= LSM6DS3_G_YEN_ENABLE;
00006e  2110              MOVS     r1,#0x10
000070  4308              ORRS     r0,r0,r1
;;;421    
;;;422        /* Enable Z axis selection */
;;;423        data &= ~(LSM6DS3_G_ZEN_MASK);
000072  21df              MOVS     r1,#0xdf
000074  4008              ANDS     r0,r0,r1
;;;424        data |= LSM6DS3_G_ZEN_ENABLE;
000076  2120              MOVS     r1,#0x20
000078  4308              ORRS     r0,r0,r1
00007a  4669              MOV      r1,sp
00007c  7008              STRB     r0,[r1,#0]
;;;425    
;;;426    	appLSM6DS3_Write(GYRO_ADDRESS, LSM6DS3_XG_CTRL10_C, 1,&data);
00007e  466b              MOV      r3,sp
000080  2201              MOVS     r2,#1
000082  2119              MOVS     r1,#0x19
000084  20d6              MOVS     r0,#0xd6
000086  f7fffffe          BL       appLSM6DS3_Write
;;;427    	LSM6DS3_Delay(5);	
00008a  2005              MOVS     r0,#5
00008c  f7fffffe          BL       LSM6DS3_Delay
;;;428    	
;;;429    }
000090  bd08              POP      {r3,pc}
;;;430    
                          ENDP


                          AREA ||i.appLSM6DS3_SetGyroCalData||, CODE, READONLY, ALIGN=2

                  appLSM6DS3_SetGyroCalData PROC
;;;138    
;;;139    void appLSM6DS3_SetGyroCalData(AXIS_TypeDef axis,int16_t data)
000000  4a06              LDR      r2,|L19.28|
;;;140    {
;;;141    	switch(axis)
000002  2800              CMP      r0,#0
000004  d005              BEQ      |L19.18|
000006  2801              CMP      r0,#1
000008  d005              BEQ      |L19.22|
00000a  2802              CMP      r0,#2
00000c  d100              BNE      |L19.16|
;;;142    	{
;;;143    		case AXIS_X:
;;;144    			cLSM6DS3_GYROx = data; 
;;;145    			break;
;;;146    
;;;147    		case AXIS_Y:
;;;148    			cLSM6DS3_GYROy = data; 
;;;149    			break;
;;;150    
;;;151    		case AXIS_Z:
;;;152    			cLSM6DS3_GYROz = data; 
00000e  8191              STRH     r1,[r2,#0xc]
                  |L19.16|
;;;153    			break;				
;;;154    	}
;;;155    }
000010  4770              BX       lr
                  |L19.18|
000012  8111              STRH     r1,[r2,#8]            ;144
000014  4770              BX       lr
                  |L19.22|
000016  8151              STRH     r1,[r2,#0xa]          ;148
000018  4770              BX       lr
;;;156    
                          ENDP

00001a  0000              DCW      0x0000
                  |L19.28|
                          DCD      ||.data||

                          AREA ||i.appLSM6DS3_SetGyroData||, CODE, READONLY, ALIGN=2

                  appLSM6DS3_SetGyroData PROC
;;;174    
;;;175    void appLSM6DS3_SetGyroData(AXIS_TypeDef axis,int16_t data)
000000  4a06              LDR      r2,|L20.28|
;;;176    {
;;;177    	switch(axis)
000002  2800              CMP      r0,#0
000004  d005              BEQ      |L20.18|
000006  2801              CMP      r0,#1
000008  d005              BEQ      |L20.22|
00000a  2802              CMP      r0,#2
00000c  d100              BNE      |L20.16|
;;;178    	{
;;;179    		case AXIS_X:
;;;180    			LSM6DS3_GYROx = data; 
;;;181    			break;
;;;182    
;;;183    		case AXIS_Y:
;;;184    			LSM6DS3_GYROy = data; 
;;;185    			break;
;;;186    
;;;187    		case AXIS_Z:
;;;188    			LSM6DS3_GYROz = data; 
00000e  8311              STRH     r1,[r2,#0x18]
                  |L20.16|
;;;189    			break;				
;;;190    	}
;;;191    }
000010  4770              BX       lr
                  |L20.18|
000012  8291              STRH     r1,[r2,#0x14]         ;180
000014  4770              BX       lr
                  |L20.22|
000016  82d1              STRH     r1,[r2,#0x16]         ;184
000018  4770              BX       lr
;;;192    
                          ENDP

00001a  0000              DCW      0x0000
                  |L20.28|
                          DCD      ||.data||

                          AREA ||i.appLSM6DS3_Setup||, CODE, READONLY, ALIGN=1

                  appLSM6DS3_Setup PROC
;;;462    
;;;463    void appLSM6DS3_Setup(void)
000000  b510              PUSH     {r4,lr}
;;;464    {
;;;465    	appLSM6DS3_CommonInit();
000002  f7fffffe          BL       appLSM6DS3_CommonInit
;;;466    	appLSM6DS3_SetGyro();
000006  f7fffffe          BL       appLSM6DS3_SetGyro
;;;467    	appLSM6DS3_SetACC();
00000a  f7fffffe          BL       appLSM6DS3_SetACC
;;;468    }	
00000e  bd10              POP      {r4,pc}
;;;469    
                          ENDP


                          AREA ||i.appLSM6DS3_Write||, CODE, READONLY, ALIGN=2

                  appLSM6DS3_Write PROC
;;;87     
;;;88     void appLSM6DS3_Write(uint8_t DeviceAddr, uint8_t RegisterAddr,
000000  b570              PUSH     {r4-r6,lr}
;;;89                                    uint16_t NumByteToWrite,
;;;90                                    uint8_t* pBuffer)
;;;91     {
000002  4605              MOV      r5,r0
;;;92     	#if 1
;;;93     	uint8_t i;
;;;94     	uint32_t tmp;
;;;95     	I2C_T *i2c = I2C0;	
000004  4815              LDR      r0,|L22.92|
;;;96     	I2C_START(i2c);                    			//Start
000006  6804              LDR      r4,[r0,#0]
000008  2628              MOVS     r6,#0x28
00000a  4334              ORRS     r4,r4,r6
00000c  6004              STR      r4,[r0,#0]
                  |L22.14|
;;;97     	I2C_WAIT_READY(i2c);
00000e  6804              LDR      r4,[r0,#0]
000010  0724              LSLS     r4,r4,#28
000012  d5fc              BPL      |L22.14|
;;;98     
;;;99     	I2C_SET_DATA(i2c, DeviceAddr);        			//send slave address
000014  6085              STR      r5,[r0,#8]
;;;100    	I2C_SET_CONTROL_REG(i2c, I2C_CTL_SI);
000016  6804              LDR      r4,[r0,#0]
000018  253c              MOVS     r5,#0x3c
00001a  43ac              BICS     r4,r4,r5
00001c  3408              ADDS     r4,r4,#8
00001e  6004              STR      r4,[r0,#0]
                  |L22.32|
;;;101    	I2C_WAIT_READY(i2c);
000020  6804              LDR      r4,[r0,#0]
000022  0724              LSLS     r4,r4,#28
000024  d5fc              BPL      |L22.32|
;;;102    
;;;103    	I2C_SET_DATA(i2c, RegisterAddr);        			//send index
000026  6081              STR      r1,[r0,#8]
;;;104    	I2C_SET_CONTROL_REG(i2c, I2C_CTL_SI);
000028  6801              LDR      r1,[r0,#0]
00002a  43a9              BICS     r1,r1,r5
00002c  3108              ADDS     r1,r1,#8
00002e  6001              STR      r1,[r0,#0]
                  |L22.48|
;;;105    	I2C_WAIT_READY(i2c);
000030  6801              LDR      r1,[r0,#0]
000032  0709              LSLS     r1,r1,#28
000034  d5fc              BPL      |L22.48|
;;;106    
;;;107    	for (i=0; i<NumByteToWrite; i++)
000036  2100              MOVS     r1,#0
000038  e00a              B        |L22.80|
                  |L22.58|
;;;108    	{
;;;109    		tmp = pBuffer[i];
00003a  5c5c              LDRB     r4,[r3,r1]
;;;110    		I2C_SET_DATA(i2c, tmp);            		//send Data
00003c  6084              STR      r4,[r0,#8]
;;;111    		I2C_SET_CONTROL_REG(i2c, I2C_CTL_SI);
00003e  6804              LDR      r4,[r0,#0]
000040  43ac              BICS     r4,r4,r5
000042  3408              ADDS     r4,r4,#8
000044  6004              STR      r4,[r0,#0]
                  |L22.70|
;;;112    		I2C_WAIT_READY(i2c);
000046  6804              LDR      r4,[r0,#0]
000048  0724              LSLS     r4,r4,#28
00004a  d5fc              BPL      |L22.70|
00004c  1c49              ADDS     r1,r1,#1
00004e  b2c9              UXTB     r1,r1                 ;107
                  |L22.80|
000050  4291              CMP      r1,r2                 ;107
000052  d3f2              BCC      |L22.58|
;;;113    	}
;;;114    
;;;115    	I2C_STOP(i2c);								//Stop
000054  f7fffffe          BL       I2C_STOP
;;;116    	#else
;;;117    	I2C_WriteMultiBytesOneReg(I2C0, DeviceAddr, RegisterAddr, pBuffer, NumByteToWrite);	
;;;118    	#endif
;;;119    }
000058  bd70              POP      {r4-r6,pc}
;;;120    
                          ENDP

00005a  0000              DCW      0x0000
                  |L22.92|
                          DCD      0x40080000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  ax_buf
                          %        32
                  ay_buf
                          %        32
                  az_buf
                          %        32
                  gx_buf
                          %        32
                  gy_buf
                          %        32
                  gz_buf
                          %        32

                          AREA ||.data||, DATA, ALIGN=2

                  FlagSwitch
000000  00                DCB      0x00
                  Flag_Calibrate
000001  00                DCB      0x00
                  cLSM6DS3_ACCx
000002  0000              DCW      0x0000
                  cLSM6DS3_ACCy
000004  0000              DCW      0x0000
                  cLSM6DS3_ACCz
000006  0000              DCW      0x0000
                  cLSM6DS3_GYROx
000008  0000              DCW      0x0000
                  cLSM6DS3_GYROy
00000a  0000              DCW      0x0000
                  cLSM6DS3_GYROz
00000c  0000              DCW      0x0000
                  LSM6DS3_ACCx
00000e  0000              DCB      0x00,0x00
                  LSM6DS3_ACCy
000010  0000              DCB      0x00,0x00
                  LSM6DS3_ACCz
000012  0000              DCB      0x00,0x00
                  LSM6DS3_GYROx
000014  0000              DCB      0x00,0x00
                  LSM6DS3_GYROy
000016  0000              DCB      0x00,0x00
                  LSM6DS3_GYROz
000018  0000              DCB      0x00,0x00
                  ||gx||
00001a  0000              DCB      0x00,0x00
                  ||gy||
00001c  0000              DCB      0x00,0x00
                  ||gz||
00001e  0000              DCB      0x00,0x00
                  ||ax||
000020  0000              DCB      0x00,0x00
                  ||ay||
000022  0000              DCB      0x00,0x00
                  ||az||
000024  00000000          DCB      0x00,0x00,0x00,0x00
                  RollAng
000028  00000000          DCFS     0x00000000 ; 0
                  PitchAng
00002c  00000000          DCFS     0x00000000 ; 0
                  angle_dot
                          DCD      0x00000000
                  f_angle
                          DCD      0x00000000
                  f_angle_dot
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\I2C_LSM6DS3.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_I2C_LSM6DS3_c_41ae50e2____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___13_I2C_LSM6DS3_c_41ae50e2____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_I2C_LSM6DS3_c_41ae50e2____REVSH|
#line 402
|__asm___13_I2C_LSM6DS3_c_41ae50e2____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
