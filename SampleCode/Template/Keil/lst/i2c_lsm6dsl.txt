; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\i2c_lsm6dsl.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\i2c_lsm6dsl.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\Library\StdDriver\inc -I..\Kalman_Filter -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\i2c_lsm6dsl.crf ..\I2C_LSM6DSL.c]
                          THUMB

                          AREA ||i.Accelerator_Calibration||, CODE, READONLY, ALIGN=2

                  Accelerator_Calibration PROC
;;;575    
;;;576    void Accelerator_Calibration(void)
000000  b500              PUSH     {lr}
;;;577    {
;;;578    	int32_t accX = 0;
;;;579    	int32_t accY = 0;
;;;580    	int32_t accZ = 0;		
;;;581    
;;;582    //	uint16_t integerX = 0;
;;;583    //	uint16_t integerY = 0;	
;;;584    //	uint16_t integerZ = 0;		
;;;585    	
;;;586    	if (Flag_Calibrate)
000002  481f              LDR      r0,|L1.128|
000004  7840              LDRB     r0,[r0,#1]  ; Flag_Calibrate
000006  2800              CMP      r0,#0
000008  d038              BEQ      |L1.124|
;;;587    	{
;;;588    		appLSM6DSL_SetAccCalData(AXIS_X,0);	//reset calibration data
00000a  2100              MOVS     r1,#0
00000c  4608              MOV      r0,r1
00000e  f7fffffe          BL       appLSM6DSL_SetAccCalData
;;;589    		accX = appLSM6DSL_GetAccData(AXIS_X);
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       appLSM6DSL_GetAccData
;;;590    		if (MEMSABS(accX)>0)
000018  0041              LSLS     r1,r0,#1
00001a  d004              BEQ      |L1.38|
;;;591    		{
;;;592    			appLSM6DSL_SetAccCalData(AXIS_X,-accX);
00001c  4240              RSBS     r0,r0,#0
00001e  b201              SXTH     r1,r0
000020  2000              MOVS     r0,#0
000022  f7fffffe          BL       appLSM6DSL_SetAccCalData
                  |L1.38|
;;;593    
;;;594    		}
;;;595    
;;;596    		appLSM6DSL_SetAccCalData(AXIS_Y,0);		//reset calibration data
000026  2100              MOVS     r1,#0
000028  2001              MOVS     r0,#1
00002a  f7fffffe          BL       appLSM6DSL_SetAccCalData
;;;597    		accY = appLSM6DSL_GetAccData(AXIS_Y);		
00002e  2001              MOVS     r0,#1
000030  f7fffffe          BL       appLSM6DSL_GetAccData
;;;598    		if (MEMSABS(accY)>0)
000034  0041              LSLS     r1,r0,#1
000036  d004              BEQ      |L1.66|
;;;599    		{
;;;600    			appLSM6DSL_SetAccCalData(AXIS_Y,-accY);
000038  4240              RSBS     r0,r0,#0
00003a  b201              SXTH     r1,r0
00003c  2001              MOVS     r0,#1
00003e  f7fffffe          BL       appLSM6DSL_SetAccCalData
                  |L1.66|
;;;601    
;;;602    		}
;;;603    
;;;604    		appLSM6DSL_SetAccCalData(AXIS_Z,0);		//reset calibration data
000042  2100              MOVS     r1,#0
000044  2002              MOVS     r0,#2
000046  f7fffffe          BL       appLSM6DSL_SetAccCalData
;;;605    		accZ = appLSM6DSL_GetAccData(AXIS_Z);		
00004a  2002              MOVS     r0,#2
00004c  f7fffffe          BL       appLSM6DSL_GetAccData
;;;606    		if ((MEMSABS(accZ)>1000)||(MEMSABS(accZ)<=999))
000050  2800              CMP      r0,#0
000052  db01              BLT      |L1.88|
000054  4601              MOV      r1,r0
000056  e000              B        |L1.90|
                  |L1.88|
000058  4241              RSBS     r1,r0,#0
                  |L1.90|
00005a  227d              MOVS     r2,#0x7d
00005c  00d2              LSLS     r2,r2,#3
00005e  4291              CMP      r1,r2
000060  dc07              BGT      |L1.114|
000062  2800              CMP      r0,#0
000064  db01              BLT      |L1.106|
000066  4601              MOV      r1,r0
000068  e000              B        |L1.108|
                  |L1.106|
00006a  4241              RSBS     r1,r0,#0
                  |L1.108|
00006c  4b05              LDR      r3,|L1.132|
00006e  4299              CMP      r1,r3
000070  dc04              BGT      |L1.124|
                  |L1.114|
;;;607    		{
;;;608    			appLSM6DSL_SetAccCalData(AXIS_Z,-accZ+1000);
000072  1a10              SUBS     r0,r2,r0
000074  b201              SXTH     r1,r0
000076  2002              MOVS     r0,#2
000078  f7fffffe          BL       appLSM6DSL_SetAccCalData
                  |L1.124|
;;;609    
;;;610    		}
;;;611    		
;;;612    //		printf("%s : %4d,%4d,%4d\r\n",__FUNCTION__,accX,accY,accZ);
;;;613    	}
;;;614    }
00007c  bd00              POP      {pc}
;;;615    
                          ENDP

00007e  0000              DCW      0x0000
                  |L1.128|
                          DCD      ||.data||
                  |L1.132|
                          DCD      0x000003e7

                          AREA ||i.Accelerator_filter||, CODE, READONLY, ALIGN=2

                  Accelerator_filter PROC
;;;615    
;;;616    void Accelerator_filter(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;617    {
;;;618    	#if defined (ENABLE_AVERAGE_FILTER)
;;;619    
;;;620    	uint8_t i;
;;;621    	int32_t ax_sum = 0, ay_sum = 0, az_sum = 0; 
000002  2500              MOVS     r5,#0
;;;622    
;;;623    	for(i = 1 ; i < FILTER_COUNT; i++)
;;;624    	{
;;;625    		ax_buf[i - 1] = ax_buf[i];
000004  4f1e              LDR      r7,|L2.128|
000006  462c              MOV      r4,r5                 ;621
000008  462b              MOV      r3,r5                 ;621
00000a  2101              MOVS     r1,#1                 ;623
                  |L2.12|
00000c  0048              LSLS     r0,r1,#1
00000e  19c6              ADDS     r6,r0,r7
000010  5a3a              LDRH     r2,[r7,r0]
000012  3e40              SUBS     r6,r6,#0x40
000014  87f2              STRH     r2,[r6,#0x3e]
;;;626    		ay_buf[i - 1] = ay_buf[i];
000016  4a1a              LDR      r2,|L2.128|
;;;627    		az_buf[i - 1] = az_buf[i];
000018  1c49              ADDS     r1,r1,#1
00001a  3220              ADDS     r2,r2,#0x20           ;626
00001c  5a16              LDRH     r6,[r2,r0]            ;626
00001e  1882              ADDS     r2,r0,r2              ;626
000020  3a40              SUBS     r2,r2,#0x40           ;626
000022  87d6              STRH     r6,[r2,#0x3e]         ;626
000024  4e16              LDR      r6,|L2.128|
000026  b2c9              UXTB     r1,r1                 ;623
000028  3640              ADDS     r6,r6,#0x40
00002a  5a32              LDRH     r2,[r6,r0]
00002c  1980              ADDS     r0,r0,r6
00002e  3840              SUBS     r0,r0,#0x40
000030  87c2              STRH     r2,[r0,#0x3e]
000032  2910              CMP      r1,#0x10              ;623
000034  d3ea              BCC      |L2.12|
;;;628    	}
;;;629    
;;;630    	ax_buf[FILTER_COUNT - 1] = appLSM6DSL_GetAccData(AXIS_X);
000036  2000              MOVS     r0,#0
000038  f7fffffe          BL       appLSM6DSL_GetAccData
00003c  83f8              STRH     r0,[r7,#0x1e]
;;;631    	ay_buf[FILTER_COUNT - 1] = appLSM6DSL_GetAccData(AXIS_Y);
00003e  2001              MOVS     r0,#1
000040  f7fffffe          BL       appLSM6DSL_GetAccData
000044  3e20              SUBS     r6,r6,#0x20
000046  83f0              STRH     r0,[r6,#0x1e]
;;;632    	az_buf[FILTER_COUNT - 1] = appLSM6DSL_GetAccData(AXIS_Z);
000048  2002              MOVS     r0,#2
00004a  f7fffffe          BL       appLSM6DSL_GetAccData
00004e  4631              MOV      r1,r6
000050  3120              ADDS     r1,r1,#0x20
000052  83c8              STRH     r0,[r1,#0x1e]
;;;633    
;;;634    	for(i = 0 ; i < FILTER_COUNT; i++)
000054  2000              MOVS     r0,#0
                  |L2.86|
;;;635    	{
;;;636    		ax_sum += ax_buf[i];
000056  4f0a              LDR      r7,|L2.128|
000058  0042              LSLS     r2,r0,#1
00005a  5ebf              LDRSH    r7,[r7,r2]
;;;637    		ay_sum += ay_buf[i];
;;;638    		az_sum += az_buf[i];
00005c  1c40              ADDS     r0,r0,#1
00005e  197d              ADDS     r5,r7,r5              ;636
000060  5eb7              LDRSH    r7,[r6,r2]            ;637
000062  5e8a              LDRSH    r2,[r1,r2]
000064  193c              ADDS     r4,r7,r4              ;637
000066  18d3              ADDS     r3,r2,r3
000068  b2c0              UXTB     r0,r0                 ;634
00006a  2810              CMP      r0,#0x10              ;634
00006c  d3f3              BCC      |L2.86|
;;;639    	}
;;;640    
;;;641    	ax = (int16_t)(ax_sum>>FILTER_FACTOR); //	/ FILTER_COUNT);
00006e  4805              LDR      r0,|L2.132|
000070  1129              ASRS     r1,r5,#4
000072  8401              STRH     r1,[r0,#0x20]
;;;642    	ay = (int16_t)(ay_sum>>FILTER_FACTOR); //	/ FILTER_COUNT);
000074  1121              ASRS     r1,r4,#4
000076  8441              STRH     r1,[r0,#0x22]
;;;643    	az = (int16_t)(az_sum>>FILTER_FACTOR); //	/ FILTER_COUNT);
000078  1119              ASRS     r1,r3,#4
00007a  8481              STRH     r1,[r0,#0x24]
;;;644    
;;;645    	#else
;;;646    	ax = appLSM6DSL_GetAccData(AXIS_X);
;;;647    	ay = appLSM6DSL_GetAccData(AXIS_Y);
;;;648    	az = appLSM6DSL_GetAccData(AXIS_Z);
;;;649    
;;;650    	#endif
;;;651    	
;;;652    }
00007c  bdf0              POP      {r4-r7,pc}
;;;653    
                          ENDP

00007e  0000              DCW      0x0000
                  |L2.128|
                          DCD      ||.bss||
                  |L2.132|
                          DCD      ||.data||

                          AREA ||i.Angle_Calculate||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_sizespec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  Angle_Calculate PROC
;;;690    
;;;691    void Angle_Calculate(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;692    {  
;;;693    	float s1 = 0;
;;;694    	float s2 = 0;	
;;;695    
;;;696    	Accelerator_filter();
000002  f7fffffe          BL       Accelerator_filter
;;;697    	Gyroscope_filter();
000006  f7fffffe          BL       Gyroscope_filter
;;;698    
;;;699    	s1 = sqrt((float)((ay *ay )+(az *az )));
00000a  4c47              LDR      r4,|L3.296|
00000c  2022              MOVS     r0,#0x22
00000e  2124              MOVS     r1,#0x24
000010  5e20              LDRSH    r0,[r4,r0]  ; ay
000012  5e61              LDRSH    r1,[r4,r1]  ; az
000014  4340              MULS     r0,r0,r0
000016  4349              MULS     r1,r1,r1
000018  1840              ADDS     r0,r0,r1
00001a  f7fffffe          BL       __aeabi_i2f
00001e  f7fffffe          BL       __aeabi_f2d
000022  f7fffffe          BL       sqrt
000026  f7fffffe          BL       __aeabi_d2f
00002a  4606              MOV      r6,r0
;;;700    	s2 = sqrt((float)((ax *ax )+(az *az )));
00002c  2020              MOVS     r0,#0x20
00002e  2124              MOVS     r1,#0x24
000030  5e20              LDRSH    r0,[r4,r0]  ; ax
000032  5e61              LDRSH    r1,[r4,r1]  ; az
000034  4340              MULS     r0,r0,r0
000036  4349              MULS     r1,r1,r1
000038  1840              ADDS     r0,r0,r1
00003a  f7fffffe          BL       __aeabi_i2f
00003e  f7fffffe          BL       __aeabi_f2d
000042  f7fffffe          BL       sqrt
000046  f7fffffe          BL       __aeabi_d2f
00004a  4605              MOV      r5,r0
;;;701    
;;;702    	PitchAng = atan(ax /s1)*180/PI;
00004c  2020              MOVS     r0,#0x20
00004e  5e20              LDRSH    r0,[r4,r0]  ; ax
000050  f7fffffe          BL       __aeabi_i2f
000054  4631              MOV      r1,r6
000056  f7fffffe          BL       __aeabi_fdiv
00005a  f7fffffe          BL       __aeabi_f2d
00005e  f7fffffe          BL       atan
000062  4e32              LDR      r6,|L3.300|
000064  2200              MOVS     r2,#0
000066  4633              MOV      r3,r6
000068  f7fffffe          BL       __aeabi_dmul
00006c  2703              MOVS     r7,#3
00006e  077f              LSLS     r7,r7,#29
000070  463a              MOV      r2,r7
000072  4b2f              LDR      r3,|L3.304|
000074  f7fffffe          BL       __aeabi_ddiv
000078  f7fffffe          BL       __aeabi_d2f
;;;703    	RollAng = atan(ay /s2)*180/PI;
00007c  62e0              STR      r0,[r4,#0x2c]  ; PitchAng
00007e  2022              MOVS     r0,#0x22
000080  5e20              LDRSH    r0,[r4,r0]  ; ay
000082  f7fffffe          BL       __aeabi_i2f
000086  4629              MOV      r1,r5
000088  f7fffffe          BL       __aeabi_fdiv
00008c  f7fffffe          BL       __aeabi_f2d
000090  f7fffffe          BL       atan
000094  2200              MOVS     r2,#0
000096  4633              MOV      r3,r6
000098  f7fffffe          BL       __aeabi_dmul
00009c  463a              MOV      r2,r7
00009e  4b24              LDR      r3,|L3.304|
0000a0  f7fffffe          BL       __aeabi_ddiv
0000a4  f7fffffe          BL       __aeabi_d2f
0000a8  4605              MOV      r5,r0
;;;704    
;;;705    //	PitchAng = atan(ax /s1)*57.295779;
;;;706    //	RollAng = atan(ay /s2)*57.295779;
;;;707    
;;;708    	#if defined (ENABLE_KALMAN_FILTER)
;;;709    	angle_dot = gx*GYRO_SCALE;	
0000aa  62a0              STR      r0,[r4,#0x28]  ; RollAng
0000ac  201a              MOVS     r0,#0x1a
0000ae  5e20              LDRSH    r0,[r4,r0]  ; gx
0000b0  f7fffffe          BL       __aeabi_i2f
;;;710    	kalman_filter(RollAng, angle_dot, &f_angle, &f_angle_dot);
0000b4  4623              MOV      r3,r4
0000b6  3338              ADDS     r3,r3,#0x38
0000b8  4601              MOV      r1,r0
0000ba  6320              STR      r0,[r4,#0x30]  ; angle_dot
0000bc  1f1a              SUBS     r2,r3,#4
0000be  4628              MOV      r0,r5
0000c0  f7fffffe          BL       kalman_filter
;;;711    	#endif
;;;712    
;;;713    	#if 1	//debug
;;;714    
;;;715    	if (FlagSwitch)
0000c4  7820              LDRB     r0,[r4,#0]  ; FlagSwitch
0000c6  2800              CMP      r0,#0
0000c8  d012              BEQ      |L3.240|
;;;716    	{
;;;717    		printf("Acc:%5d,%5d,%5d,",ax ,ay ,az );
0000ca  2324              MOVS     r3,#0x24
0000cc  2222              MOVS     r2,#0x22
0000ce  2120              MOVS     r1,#0x20
0000d0  5ee3              LDRSH    r3,[r4,r3]  ; az
0000d2  5ea2              LDRSH    r2,[r4,r2]  ; ay
0000d4  5e61              LDRSH    r1,[r4,r1]  ; ax
0000d6  a017              ADR      r0,|L3.308|
0000d8  f7fffffe          BL       __2printf
;;;718    		printf("Gyro:%5d,%5d,%5d,",gx ,gy ,gz );	
0000dc  231e              MOVS     r3,#0x1e
0000de  221c              MOVS     r2,#0x1c
0000e0  211a              MOVS     r1,#0x1a
0000e2  5ee3              LDRSH    r3,[r4,r3]  ; gz
0000e4  5ea2              LDRSH    r2,[r4,r2]  ; gy
0000e6  5e61              LDRSH    r1,[r4,r1]  ; gx
0000e8  a017              ADR      r0,|L3.328|
0000ea  f7fffffe          BL       __2printf
;;;719    		printf("\r\n");
0000ee  e017              B        |L3.288|
                  |L3.240|
;;;720    	}
;;;721    	else
;;;722    	{		
;;;723    		printf("Pitch:%8.3lf,",PitchAng);
0000f0  6ae0              LDR      r0,[r4,#0x2c]  ; PitchAng
0000f2  f7fffffe          BL       __aeabi_f2d
0000f6  4602              MOV      r2,r0
0000f8  460b              MOV      r3,r1
0000fa  a018              ADR      r0,|L3.348|
0000fc  f7fffffe          BL       __2printf
;;;724    		printf("Roll:%8.3lf,",RollAng);
000100  6aa0              LDR      r0,[r4,#0x28]  ; RollAng
000102  f7fffffe          BL       __aeabi_f2d
000106  4602              MOV      r2,r0
000108  460b              MOV      r3,r1
00010a  a018              ADR      r0,|L3.364|
00010c  f7fffffe          BL       __2printf
;;;725    
;;;726    		#if defined (ENABLE_KALMAN_FILTER)
;;;727    		printf("Angle:%8.3lf,",f_angle);
000110  6b60              LDR      r0,[r4,#0x34]  ; f_angle
000112  f7fffffe          BL       __aeabi_f2d
000116  4602              MOV      r2,r0
000118  460b              MOV      r3,r1
00011a  a018              ADR      r0,|L3.380|
00011c  f7fffffe          BL       __2printf
                  |L3.288|
000120  a01a              ADR      r0,|L3.396|
000122  f7fffffe          BL       __2printf
;;;728    		#endif
;;;729    		
;;;730    		printf("\r\n");
;;;731    	}
;;;732    	
;;;733    	#endif
;;;734    }
000126  bdf8              POP      {r3-r7,pc}
;;;735    
                          ENDP

                  |L3.296|
                          DCD      ||.data||
                  |L3.300|
                          DCD      0x40668000
                  |L3.304|
                          DCD      0x400921fb
                  |L3.308|
000134  4163633a          DCB      "Acc:%5d,%5d,%5d,",0
000138  2535642c
00013c  2535642c
000140  2535642c
000144  00      
000145  00                DCB      0
000146  00                DCB      0
000147  00                DCB      0
                  |L3.328|
000148  4779726f          DCB      "Gyro:%5d,%5d,%5d,",0
00014c  3a253564
000150  2c253564
000154  2c253564
000158  2c00    
00015a  00                DCB      0
00015b  00                DCB      0
                  |L3.348|
00015c  50697463          DCB      "Pitch:%8.3lf,",0
000160  683a2538
000164  2e336c66
000168  2c00    
00016a  00                DCB      0
00016b  00                DCB      0
                  |L3.364|
00016c  526f6c6c          DCB      "Roll:%8.3lf,",0
000170  3a25382e
000174  336c662c
000178  00      
000179  00                DCB      0
00017a  00                DCB      0
00017b  00                DCB      0
                  |L3.380|
00017c  416e676c          DCB      "Angle:%8.3lf,",0
000180  653a2538
000184  2e336c66
000188  2c00    
00018a  00                DCB      0
00018b  00                DCB      0
                  |L3.396|
00018c  0d0a00            DCB      "\r\n",0
00018f  00                DCB      0

                          AREA ||i.Gyroscope_Calibration||, CODE, READONLY, ALIGN=2

                  Gyroscope_Calibration PROC
;;;540    
;;;541    void Gyroscope_Calibration(void)
000000  b500              PUSH     {lr}
;;;542    {
;;;543    	int32_t gyroX = 0;
;;;544    	int32_t gyroY = 0;
;;;545    	int32_t gyroZ = 0;		
;;;546    
;;;547    //	uint16_t integerX = 0;
;;;548    //	uint16_t integerY = 0;	
;;;549    //	uint16_t integerZ = 0;	
;;;550    	
;;;551    	if (Flag_Calibrate)
000002  4811              LDR      r0,|L4.72|
000004  7840              LDRB     r0,[r0,#1]  ; Flag_Calibrate
000006  2800              CMP      r0,#0
000008  d01d              BEQ      |L4.70|
;;;552    	{
;;;553    		gyroX = appLSM6DSL_GetGyroData(AXIS_X);
00000a  2000              MOVS     r0,#0
00000c  f7fffffe          BL       appLSM6DSL_GetGyroData
;;;554    		if (MEMSABS(gyroX)>0)
000010  0041              LSLS     r1,r0,#1
000012  d004              BEQ      |L4.30|
;;;555    		{
;;;556    			appLSM6DSL_SetGyroCalData(AXIS_X,-gyroX);
000014  4240              RSBS     r0,r0,#0
000016  b201              SXTH     r1,r0
000018  2000              MOVS     r0,#0
00001a  f7fffffe          BL       appLSM6DSL_SetGyroCalData
                  |L4.30|
;;;557    
;;;558    		}
;;;559    		gyroY = appLSM6DSL_GetGyroData(AXIS_Y);
00001e  2001              MOVS     r0,#1
000020  f7fffffe          BL       appLSM6DSL_GetGyroData
;;;560    		if (MEMSABS(gyroY)>0)
000024  0041              LSLS     r1,r0,#1
000026  d004              BEQ      |L4.50|
;;;561    		{
;;;562    			appLSM6DSL_SetGyroCalData(AXIS_Y,-gyroY);
000028  4240              RSBS     r0,r0,#0
00002a  b201              SXTH     r1,r0
00002c  2001              MOVS     r0,#1
00002e  f7fffffe          BL       appLSM6DSL_SetGyroCalData
                  |L4.50|
;;;563    
;;;564    		}
;;;565    		gyroZ = appLSM6DSL_GetGyroData(AXIS_Z);
000032  2002              MOVS     r0,#2
000034  f7fffffe          BL       appLSM6DSL_GetGyroData
;;;566    		if (MEMSABS(gyroZ)>0)
000038  0041              LSLS     r1,r0,#1
00003a  d004              BEQ      |L4.70|
;;;567    		{
;;;568    			appLSM6DSL_SetGyroCalData(AXIS_Z,-gyroZ);
00003c  4240              RSBS     r0,r0,#0
00003e  b201              SXTH     r1,r0
000040  2002              MOVS     r0,#2
000042  f7fffffe          BL       appLSM6DSL_SetGyroCalData
                  |L4.70|
;;;569    
;;;570    		}
;;;571    		
;;;572    //		printf("%s : %4d,%4d,%4d\r\n",__FUNCTION__,gyroX,gyroY,gyroZ);
;;;573    	}
;;;574    }
000046  bd00              POP      {pc}
;;;575    
                          ENDP

                  |L4.72|
                          DCD      ||.data||

                          AREA ||i.Gyroscope_filter||, CODE, READONLY, ALIGN=2

                  Gyroscope_filter PROC
;;;653    
;;;654    void Gyroscope_filter(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;655    {
;;;656    	#if defined (ENABLE_AVERAGE_FILTER)	
;;;657    	uint8_t i;
;;;658    	int32_t gx_sum = 0, gy_sum = 0, gz_sum = 0; 
000002  2500              MOVS     r5,#0
;;;659    
;;;660    	for(i = 1 ; i < FILTER_COUNT; i++)
;;;661    	{
;;;662    		gx_buf[i - 1] = gx_buf[i];
000004  4f1e              LDR      r7,|L5.128|
000006  462c              MOV      r4,r5                 ;658
000008  462b              MOV      r3,r5                 ;658
00000a  2101              MOVS     r1,#1                 ;660
                  |L5.12|
00000c  0048              LSLS     r0,r1,#1
00000e  19c6              ADDS     r6,r0,r7
000010  5a3a              LDRH     r2,[r7,r0]
000012  3e40              SUBS     r6,r6,#0x40
000014  87f2              STRH     r2,[r6,#0x3e]
;;;663    		gy_buf[i - 1] = gy_buf[i];
000016  4a1a              LDR      r2,|L5.128|
;;;664    		gz_buf[i - 1] = gz_buf[i];
000018  1c49              ADDS     r1,r1,#1
00001a  3220              ADDS     r2,r2,#0x20           ;663
00001c  5a16              LDRH     r6,[r2,r0]            ;663
00001e  1882              ADDS     r2,r0,r2              ;663
000020  3a40              SUBS     r2,r2,#0x40           ;663
000022  87d6              STRH     r6,[r2,#0x3e]         ;663
000024  4e16              LDR      r6,|L5.128|
000026  b2c9              UXTB     r1,r1                 ;660
000028  3640              ADDS     r6,r6,#0x40
00002a  5a32              LDRH     r2,[r6,r0]
00002c  1980              ADDS     r0,r0,r6
00002e  3840              SUBS     r0,r0,#0x40
000030  87c2              STRH     r2,[r0,#0x3e]
000032  2910              CMP      r1,#0x10              ;660
000034  d3ea              BCC      |L5.12|
;;;665    	}
;;;666    
;;;667    	gx_buf[FILTER_COUNT - 1] = appLSM6DSL_GetGyroData(AXIS_X);
000036  2000              MOVS     r0,#0
000038  f7fffffe          BL       appLSM6DSL_GetGyroData
00003c  83f8              STRH     r0,[r7,#0x1e]
;;;668    	gy_buf[FILTER_COUNT - 1] = appLSM6DSL_GetGyroData(AXIS_Y);
00003e  2001              MOVS     r0,#1
000040  f7fffffe          BL       appLSM6DSL_GetGyroData
000044  3e20              SUBS     r6,r6,#0x20
000046  83f0              STRH     r0,[r6,#0x1e]
;;;669    	gz_buf[FILTER_COUNT - 1] = appLSM6DSL_GetGyroData(AXIS_Z);
000048  2002              MOVS     r0,#2
00004a  f7fffffe          BL       appLSM6DSL_GetGyroData
00004e  4631              MOV      r1,r6
000050  3120              ADDS     r1,r1,#0x20
000052  83c8              STRH     r0,[r1,#0x1e]
;;;670    
;;;671    	for(i = 0 ; i < FILTER_COUNT; i++)
000054  2000              MOVS     r0,#0
                  |L5.86|
;;;672    	{
;;;673    		gx_sum += gx_buf[i];
000056  4f0a              LDR      r7,|L5.128|
000058  0042              LSLS     r2,r0,#1
00005a  5ebf              LDRSH    r7,[r7,r2]
;;;674    		gy_sum += gy_buf[i];
;;;675    		gz_sum += gz_buf[i];
00005c  1c40              ADDS     r0,r0,#1
00005e  197d              ADDS     r5,r7,r5              ;673
000060  5eb7              LDRSH    r7,[r6,r2]            ;674
000062  5e8a              LDRSH    r2,[r1,r2]
000064  193c              ADDS     r4,r7,r4              ;674
000066  18d3              ADDS     r3,r2,r3
000068  b2c0              UXTB     r0,r0                 ;671
00006a  2810              CMP      r0,#0x10              ;671
00006c  d3f3              BCC      |L5.86|
;;;676    	}
;;;677    
;;;678    	gx = (int16_t)(gx_sum>>FILTER_FACTOR);// / FILTER_COUNT);
00006e  4805              LDR      r0,|L5.132|
000070  1129              ASRS     r1,r5,#4
000072  8341              STRH     r1,[r0,#0x1a]
;;;679    	gy = (int16_t)(gy_sum>>FILTER_FACTOR);// / FILTER_COUNT);
000074  1121              ASRS     r1,r4,#4
000076  8381              STRH     r1,[r0,#0x1c]
;;;680    	gz = (int16_t)(gz_sum>>FILTER_FACTOR);// / FILTER_COUNT);
000078  1119              ASRS     r1,r3,#4
00007a  83c1              STRH     r1,[r0,#0x1e]
;;;681    
;;;682    	#else
;;;683    	gx = appLSM6DSL_GetGyroData(AXIS_X);
;;;684    	gy = appLSM6DSL_GetGyroData(AXIS_Y);
;;;685    	gz = appLSM6DSL_GetGyroData(AXIS_Z);	
;;;686    
;;;687    	#endif
;;;688    	
;;;689    }
00007c  bdf0              POP      {r4-r7,pc}
;;;690    
                          ENDP

00007e  0000              DCW      0x0000
                  |L5.128|
                          DCD      ||.bss||+0x60
                  |L5.132|
                          DCD      ||.data||

                          AREA ||i.LSM6DSL_Delay||, CODE, READONLY, ALIGN=1

                  LSM6DSL_Delay PROC
;;;41     
;;;42     void LSM6DSL_Delay(uint16_t nCount)
000000  e001              B        |L6.6|
                  |L6.2|
;;;43     {
;;;44         /* Decrement nCount value */
;;;45         while (nCount != 0)
;;;46         {
;;;47             nCount--;
000002  1e40              SUBS     r0,r0,#1
000004  b280              UXTH     r0,r0
                  |L6.6|
000006  2800              CMP      r0,#0                 ;45
000008  d1fb              BNE      |L6.2|
;;;48         }
;;;49     }
00000a  4770              BX       lr
;;;50     
                          ENDP


                          AREA ||i.appLSM6DSL_GetAcc||, CODE, READONLY, ALIGN=2

                  appLSM6DSL_GetAcc PROC
;;;271    
;;;272    void appLSM6DSL_GetAcc(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;273    {
;;;274    	uint8_t tmpxl, tmpxh, tmpyl, tmpyh, tmpzl, tmpzh, tmp;
;;;275    	int16_t ax_s,ay_s,az_s;
;;;276    	uint8_t u8WaitCnt=0;
;;;277        float sensitivity = LSM6DSL_XL_FS_2G_SENSITIVITY;	//default
000002  4d45              LDR      r5,|L7.280|
000004  b087              SUB      sp,sp,#0x1c           ;273
000006  2400              MOVS     r4,#0                 ;276
                  |L7.8|
;;;278    	
;;;279    	do{
;;;280    		appLSM6DSL_Read(ACC_ADDRESS, LSM6DSL_XG_STATUS_REG, 1,&tmp);
000008  466b              MOV      r3,sp
00000a  2201              MOVS     r2,#1
00000c  211e              MOVS     r1,#0x1e
00000e  20d6              MOVS     r0,#0xd6
000010  f7fffffe          BL       appLSM6DSL_Read
;;;281    		if (u8WaitCnt++>30)
000014  4620              MOV      r0,r4
000016  1c64              ADDS     r4,r4,#1
000018  b2e4              UXTB     r4,r4
00001a  281e              CMP      r0,#0x1e
00001c  d803              BHI      |L7.38|
;;;282    			break;
;;;283    	}while(!(tmp&BIT(0)));
00001e  4668              MOV      r0,sp
000020  7800              LDRB     r0,[r0,#0]
000022  07c0              LSLS     r0,r0,#31
000024  d0f0              BEQ      |L7.8|
                  |L7.38|
;;;284    
;;;285    	#if 1	//calculate linear acceleration in mg
;;;286    	appLSM6DSL_Read(ACC_ADDRESS, LSM6DSL_XG_CTRL1_XL, 1,&tmp);
000026  466b              MOV      r3,sp
000028  2201              MOVS     r2,#1
00002a  2110              MOVS     r1,#0x10
00002c  20d6              MOVS     r0,#0xd6
00002e  f7fffffe          BL       appLSM6DSL_Read
;;;287        tmp &= LSM6DSL_XL_FS_MASK;
000032  4669              MOV      r1,sp
000034  7808              LDRB     r0,[r1,#0]
000036  210c              MOVS     r1,#0xc
000038  4008              ANDS     r0,r0,r1
00003a  4669              MOV      r1,sp
00003c  7008              STRB     r0,[r1,#0]
;;;288    //	printf("tmp(A) = 0x%2X\r\n",tmp);//debug
;;;289        switch(tmp)
00003e  d00b              BEQ      |L7.88|
000040  2804              CMP      r0,#4
000042  d008              BEQ      |L7.86|
000044  2808              CMP      r0,#8
000046  d002              BEQ      |L7.78|
000048  280c              CMP      r0,#0xc
00004a  d105              BNE      |L7.88|
00004c  e001              B        |L7.82|
                  |L7.78|
;;;290        {
;;;291          case LSM6DSL_XL_FS_2G:
;;;292            sensitivity = LSM6DSL_XL_FS_2G_SENSITIVITY;
;;;293            break;
;;;294          case LSM6DSL_XL_FS_4G:
;;;295            sensitivity = LSM6DSL_XL_FS_4G_SENSITIVITY;
00004e  4d33              LDR      r5,|L7.284|
;;;296            break;
000050  e002              B        |L7.88|
                  |L7.82|
;;;297          case LSM6DSL_XL_FS_8G:
;;;298            sensitivity = LSM6DSL_XL_FS_8G_SENSITIVITY;
000052  4d33              LDR      r5,|L7.288|
;;;299            break;
000054  e000              B        |L7.88|
                  |L7.86|
;;;300          case LSM6DSL_XL_FS_16G:
;;;301            sensitivity = LSM6DSL_XL_FS_16G_SENSITIVITY;
000056  4d33              LDR      r5,|L7.292|
                  |L7.88|
;;;302            break;
;;;303        }
;;;304    	#endif	
;;;305    
;;;306    	appLSM6DSL_Read(ACC_ADDRESS, LSM6DSL_XG_OUT_X_H_XL, 1, &tmpxh);
000058  ab02              ADD      r3,sp,#8
00005a  2201              MOVS     r2,#1
00005c  2129              MOVS     r1,#0x29
00005e  20d6              MOVS     r0,#0xd6
000060  f7fffffe          BL       appLSM6DSL_Read
;;;307    	appLSM6DSL_Read(ACC_ADDRESS, LSM6DSL_XG_OUT_X_L_XL, 1, &tmpxl);
000064  ab01              ADD      r3,sp,#4
000066  2201              MOVS     r2,#1
000068  2128              MOVS     r1,#0x28
00006a  20d6              MOVS     r0,#0xd6
00006c  f7fffffe          BL       appLSM6DSL_Read
;;;308    	ax_s = ((int16_t) ((tmpxh << 8) | tmpxl));
000070  4669              MOV      r1,sp
000072  7a08              LDRB     r0,[r1,#8]
000074  7909              LDRB     r1,[r1,#4]
000076  0200              LSLS     r0,r0,#8
000078  4308              ORRS     r0,r0,r1
00007a  b207              SXTH     r7,r0
;;;309    //	printf("ax_s:%2d,%2d,%2d |",ax_s,tmpxh,tmpxl);	//debug
;;;310    
;;;311    	appLSM6DSL_Read(ACC_ADDRESS, LSM6DSL_XG_OUT_Y_H_XL, 1, &tmpyh);
00007c  ab04              ADD      r3,sp,#0x10
00007e  2201              MOVS     r2,#1
000080  212b              MOVS     r1,#0x2b
000082  20d6              MOVS     r0,#0xd6
000084  f7fffffe          BL       appLSM6DSL_Read
;;;312    	appLSM6DSL_Read(ACC_ADDRESS, LSM6DSL_XG_OUT_Y_L_XL, 1, &tmpyl);
000088  ab03              ADD      r3,sp,#0xc
00008a  2201              MOVS     r2,#1
00008c  212a              MOVS     r1,#0x2a
00008e  20d6              MOVS     r0,#0xd6
000090  f7fffffe          BL       appLSM6DSL_Read
;;;313    	ay_s = ((int16_t) ((tmpyh << 8) | tmpyl));
000094  4669              MOV      r1,sp
000096  7c08              LDRB     r0,[r1,#0x10]
000098  7b09              LDRB     r1,[r1,#0xc]
00009a  0200              LSLS     r0,r0,#8
00009c  4308              ORRS     r0,r0,r1
00009e  b206              SXTH     r6,r0
;;;314    //	printf("ay_s:%2d,%2d,%2d |",ay_s,tmpyh,tmpyl);	//debug	
;;;315    
;;;316    	appLSM6DSL_Read(ACC_ADDRESS, LSM6DSL_XG_OUT_Z_H_XL, 1, &tmpzh);
0000a0  ab06              ADD      r3,sp,#0x18
0000a2  2201              MOVS     r2,#1
0000a4  212d              MOVS     r1,#0x2d
0000a6  20d6              MOVS     r0,#0xd6
0000a8  f7fffffe          BL       appLSM6DSL_Read
;;;317    	appLSM6DSL_Read(ACC_ADDRESS, LSM6DSL_XG_OUT_Z_L_XL, 1, &tmpzl);
0000ac  ab05              ADD      r3,sp,#0x14
0000ae  2201              MOVS     r2,#1
0000b0  212c              MOVS     r1,#0x2c
0000b2  20d6              MOVS     r0,#0xd6
0000b4  f7fffffe          BL       appLSM6DSL_Read
;;;318    	az_s = ((int16_t) ((tmpzh << 8) | tmpzl));
0000b8  4669              MOV      r1,sp
0000ba  7e08              LDRB     r0,[r1,#0x18]
0000bc  7d09              LDRB     r1,[r1,#0x14]
0000be  0200              LSLS     r0,r0,#8
0000c0  4308              ORRS     r0,r0,r1
0000c2  b204              SXTH     r4,r0
;;;319    //	printf("az_s:%2d,%2d,%2d\r\n",az_s,tmpzh,tmpzl);	//debug	
;;;320    
;;;321    	appLSM6DSL_SetAccData(AXIS_X,(int16_t)(ax_s*sensitivity));	
0000c4  4638              MOV      r0,r7
0000c6  f7fffffe          BL       __aeabi_i2f
0000ca  4629              MOV      r1,r5
0000cc  f7fffffe          BL       __aeabi_fmul
0000d0  f7fffffe          BL       __aeabi_f2iz
0000d4  b201              SXTH     r1,r0
0000d6  2000              MOVS     r0,#0
0000d8  f7fffffe          BL       appLSM6DSL_SetAccData
;;;322    	appLSM6DSL_SetAccData(AXIS_Y,(int16_t)(ay_s*sensitivity));	
0000dc  4630              MOV      r0,r6
0000de  f7fffffe          BL       __aeabi_i2f
0000e2  4629              MOV      r1,r5
0000e4  f7fffffe          BL       __aeabi_fmul
0000e8  f7fffffe          BL       __aeabi_f2iz
0000ec  b201              SXTH     r1,r0
0000ee  2001              MOVS     r0,#1
0000f0  f7fffffe          BL       appLSM6DSL_SetAccData
;;;323    	appLSM6DSL_SetAccData(AXIS_Z,(int16_t)(az_s*sensitivity));	
0000f4  4620              MOV      r0,r4
0000f6  f7fffffe          BL       __aeabi_i2f
0000fa  4629              MOV      r1,r5
0000fc  f7fffffe          BL       __aeabi_fmul
000100  f7fffffe          BL       __aeabi_f2iz
000104  b201              SXTH     r1,r0
000106  2002              MOVS     r0,#2
000108  f7fffffe          BL       appLSM6DSL_SetAccData
;;;324    
;;;325    	LSM6DSL_Delay(5);
00010c  2005              MOVS     r0,#5
00010e  f7fffffe          BL       LSM6DSL_Delay
;;;326    }
000112  b007              ADD      sp,sp,#0x1c
000114  bdf0              POP      {r4-r7,pc}
;;;327    
                          ENDP

000116  0000              DCW      0x0000
                  |L7.280|
                          DCD      0x3d79db23
                  |L7.284|
                          DCD      0x3df9db23
                  |L7.288|
                          DCD      0x3e79db23
                  |L7.292|
                          DCD      0x3ef9db23

                          AREA ||i.appLSM6DSL_GetAccData||, CODE, READONLY, ALIGN=2

                  appLSM6DSL_GetAccData PROC
;;;226    
;;;227    int16_t appLSM6DSL_GetAccData(AXIS_TypeDef axis)
000000  4601              MOV      r1,r0
;;;228    {
;;;229    	int16_t data = 0;
000002  2000              MOVS     r0,#0
;;;230    	
;;;231    	switch(axis)
;;;232    	{
;;;233    		case AXIS_X:
;;;234    			data = LSM6DSL_ACCx + cLSM6DSL_ACCx; 
000004  4a08              LDR      r2,|L8.40|
000006  2900              CMP      r1,#0                 ;231
000008  d008              BEQ      |L8.28|
00000a  2901              CMP      r1,#1                 ;231
00000c  d009              BEQ      |L8.34|
00000e  2902              CMP      r1,#2                 ;231
000010  d103              BNE      |L8.26|
;;;235    			break;
;;;236    
;;;237    		case AXIS_Y:
;;;238    			data = LSM6DSL_ACCy + cLSM6DSL_ACCy; 
;;;239    			break;
;;;240    
;;;241    		case AXIS_Z:
;;;242    			data = LSM6DSL_ACCz + cLSM6DSL_ACCz; 
000012  8a50              LDRH     r0,[r2,#0x12]  ; LSM6DSL_ACCz
000014  88d1              LDRH     r1,[r2,#6]  ; cLSM6DSL_ACCz
                  |L8.22|
000016  1840              ADDS     r0,r0,r1
000018  b200              SXTH     r0,r0
                  |L8.26|
;;;243    			break;				
;;;244    	}
;;;245    	
;;;246    	return data ;
;;;247    }
00001a  4770              BX       lr
                  |L8.28|
00001c  89d0              LDRH     r0,[r2,#0xe]          ;234  ; LSM6DSL_ACCx
00001e  8851              LDRH     r1,[r2,#2]            ;234  ; cLSM6DSL_ACCx
000020  e7f9              B        |L8.22|
                  |L8.34|
000022  8a10              LDRH     r0,[r2,#0x10]         ;238  ; LSM6DSL_ACCy
000024  8891              LDRH     r1,[r2,#4]            ;238  ; cLSM6DSL_ACCy
000026  e7f6              B        |L8.22|
;;;248    
                          ENDP

                  |L8.40|
                          DCD      ||.data||

                          AREA ||i.appLSM6DSL_GetData||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  appLSM6DSL_GetData PROC
;;;518    
;;;519    void appLSM6DSL_GetData(void)
000000  b5fe              PUSH     {r1-r7,lr}
;;;520    {
;;;521    	appLSM6DSL_GetAcc();
000002  f7fffffe          BL       appLSM6DSL_GetAcc
;;;522    	appLSM6DSL_GetGyro();
000006  f7fffffe          BL       appLSM6DSL_GetGyro
;;;523    
;;;524    	#if 1	//debug
;;;525    	printf("ACC:%5d,%5d,%5d, GYRO:%5d,%5d,%5d\r\n",
00000a  2002              MOVS     r0,#2
00000c  f7fffffe          BL       appLSM6DSL_GetGyroData
000010  4607              MOV      r7,r0
000012  2001              MOVS     r0,#1
000014  f7fffffe          BL       appLSM6DSL_GetGyroData
000018  4606              MOV      r6,r0
00001a  2000              MOVS     r0,#0
00001c  f7fffffe          BL       appLSM6DSL_GetGyroData
000020  4605              MOV      r5,r0
000022  2002              MOVS     r0,#2
000024  f7fffffe          BL       appLSM6DSL_GetAccData
000028  4603              MOV      r3,r0
00002a  2001              MOVS     r0,#1
00002c  f7fffffe          BL       appLSM6DSL_GetAccData
000030  4604              MOV      r4,r0
000032  2000              MOVS     r0,#0
000034  f7fffffe          BL       appLSM6DSL_GetAccData
000038  4622              MOV      r2,r4
00003a  466c              MOV      r4,sp
00003c  c4e0              STM      r4!,{r5-r7}
00003e  4601              MOV      r1,r0
000040  a001              ADR      r0,|L9.72|
000042  f7fffffe          BL       __2printf
;;;526    				appLSM6DSL_GetAccData(AXIS_X),appLSM6DSL_GetAccData(AXIS_Y),appLSM6DSL_GetAccData(AXIS_Z),
;;;527    				appLSM6DSL_GetGyroData(AXIS_X),appLSM6DSL_GetGyroData(AXIS_Y),appLSM6DSL_GetGyroData(AXIS_Z));
;;;528    	#endif
;;;529    }	
000046  bdfe              POP      {r1-r7,pc}
;;;530    
                          ENDP

                  |L9.72|
000048  4143433a          DCB      "ACC:%5d,%5d,%5d, GYRO:%5d,%5d,%5d\r\n",0
00004c  2535642c
000050  2535642c
000054  2535642c
000058  20475952
00005c  4f3a2535
000060  642c2535
000064  642c2535
000068  640d0a00

                          AREA ||i.appLSM6DSL_GetGyro||, CODE, READONLY, ALIGN=2

                  appLSM6DSL_GetGyro PROC
;;;327    
;;;328    void appLSM6DSL_GetGyro(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;329    {
;;;330    	uint8_t tmpxl, tmpxh, tmpyl, tmpyh, tmpzl, tmpzh, tmp;
;;;331    	int16_t gx_s,gy_s,gz_s;
;;;332    	uint8_t u8WaitCnt=0;
;;;333        float sensitivity = LSM6DSL_G_FS_125_SENSITIVITY;	//default
000002  4d4f              LDR      r5,|L10.320|
000004  b087              SUB      sp,sp,#0x1c           ;329
000006  2400              MOVS     r4,#0                 ;332
                  |L10.8|
;;;334        
;;;335    	do{
;;;336    		appLSM6DSL_Read(GYRO_ADDRESS, LSM6DSL_XG_STATUS_REG, 1,&tmp);
000008  466b              MOV      r3,sp
00000a  2201              MOVS     r2,#1
00000c  211e              MOVS     r1,#0x1e
00000e  20d6              MOVS     r0,#0xd6
000010  f7fffffe          BL       appLSM6DSL_Read
000014  1c64              ADDS     r4,r4,#1
;;;337    		u8WaitCnt++;
000016  b2e4              UXTB     r4,r4
;;;338    		if (u8WaitCnt>30)
000018  2c1e              CMP      r4,#0x1e
00001a  d803              BHI      |L10.36|
;;;339    			break;
;;;340    	}while(!(tmp&BIT(1)));
00001c  4668              MOV      r0,sp
00001e  7800              LDRB     r0,[r0,#0]
000020  0780              LSLS     r0,r0,#30
000022  d5f1              BPL      |L10.8|
                  |L10.36|
;;;341    
;;;342    	#if 1	//calculate angular rate in mdps
;;;343    	appLSM6DSL_Read(GYRO_ADDRESS, LSM6DSL_XG_CTRL2_G, 1,&tmp);
000024  466b              MOV      r3,sp
000026  2201              MOVS     r2,#1
000028  2111              MOVS     r1,#0x11
00002a  20d6              MOVS     r0,#0xd6
00002c  f7fffffe          BL       appLSM6DSL_Read
;;;344        tmp &= LSM6DSL_G_FS_MASK;
000030  4669              MOV      r1,sp
000032  7808              LDRB     r0,[r1,#0]
000034  210c              MOVS     r1,#0xc
000036  4008              ANDS     r0,r0,r1
000038  4669              MOV      r1,sp
00003a  7008              STRB     r0,[r1,#0]
;;;345    //	printf("tmp(G) = 0x%2X\r\n",tmp);//debug
;;;346        switch(tmp)
00003c  2804              CMP      r0,#4
00003e  d00a              BEQ      |L10.86|
000040  dc02              BGT      |L10.72|
000042  2800              CMP      r0,#0
000044  d10c              BNE      |L10.96|
000046  e004              B        |L10.82|
                  |L10.72|
000048  2808              CMP      r0,#8
00004a  d006              BEQ      |L10.90|
00004c  280c              CMP      r0,#0xc
00004e  d107              BNE      |L10.96|
000050  e005              B        |L10.94|
                  |L10.82|
;;;347        {
;;;348          case LSM6DSL_G_FS_125:
;;;349            sensitivity = LSM6DSL_G_FS_125_SENSITIVITY;
;;;350            break;
;;;351          case LSM6DSL_G_FS_245:
;;;352            sensitivity = LSM6DSL_G_FS_245_SENSITIVITY;
000052  4d3c              LDR      r5,|L10.324|
;;;353            break;
000054  e004              B        |L10.96|
                  |L10.86|
;;;354          case LSM6DSL_G_FS_500:
;;;355            sensitivity = LSM6DSL_G_FS_500_SENSITIVITY;
000056  4d3c              LDR      r5,|L10.328|
;;;356            break;
000058  e002              B        |L10.96|
                  |L10.90|
;;;357          case LSM6DSL_G_FS_1000:
;;;358            sensitivity = LSM6DSL_G_FS_1000_SENSITIVITY;
00005a  4d3c              LDR      r5,|L10.332|
;;;359            break;
00005c  e000              B        |L10.96|
                  |L10.94|
;;;360          case LSM6DSL_G_FS_2000:
;;;361            sensitivity = LSM6DSL_G_FS_2000_SENSITIVITY;
00005e  4d3c              LDR      r5,|L10.336|
                  |L10.96|
;;;362            break;
;;;363        }
;;;364    	#endif	
;;;365    
;;;366    	appLSM6DSL_Read(GYRO_ADDRESS, LSM6DSL_XG_OUT_X_H_G, 1, &tmpxh);
000060  ab02              ADD      r3,sp,#8
000062  2201              MOVS     r2,#1
000064  2123              MOVS     r1,#0x23
000066  20d6              MOVS     r0,#0xd6
000068  f7fffffe          BL       appLSM6DSL_Read
;;;367    	appLSM6DSL_Read(GYRO_ADDRESS, LSM6DSL_XG_OUT_X_L_G, 1, &tmpxl);
00006c  ab01              ADD      r3,sp,#4
00006e  2201              MOVS     r2,#1
000070  2122              MOVS     r1,#0x22
000072  20d6              MOVS     r0,#0xd6
000074  f7fffffe          BL       appLSM6DSL_Read
;;;368    	gx_s = (((int16_t)(tmpxh << 8)) | ((int16_t)tmpxl));
000078  4668              MOV      r0,sp
00007a  7a00              LDRB     r0,[r0,#8]
;;;369    //	printf("gx_s:%4d,%4d,%4d |",gx_s,tmpxh,tmpxl);	//debug
;;;370    
;;;371    	appLSM6DSL_Read(GYRO_ADDRESS, LSM6DSL_XG_OUT_Y_H_G, 1, &tmpyh);
00007c  ab04              ADD      r3,sp,#0x10
00007e  0200              LSLS     r0,r0,#8              ;368
000080  b207              SXTH     r7,r0                 ;368
000082  4668              MOV      r0,sp                 ;368
000084  7900              LDRB     r0,[r0,#4]            ;368
000086  2201              MOVS     r2,#1
000088  4307              ORRS     r7,r7,r0              ;368
00008a  2125              MOVS     r1,#0x25
00008c  20d6              MOVS     r0,#0xd6
00008e  f7fffffe          BL       appLSM6DSL_Read
;;;372    	appLSM6DSL_Read(GYRO_ADDRESS, LSM6DSL_XG_OUT_Y_L_G, 1, &tmpyl);
000092  ab03              ADD      r3,sp,#0xc
000094  2201              MOVS     r2,#1
000096  2124              MOVS     r1,#0x24
000098  20d6              MOVS     r0,#0xd6
00009a  f7fffffe          BL       appLSM6DSL_Read
;;;373    	gy_s = (((int16_t)(tmpyh << 8)) | ((int16_t)tmpyl));
00009e  4668              MOV      r0,sp
0000a0  7c00              LDRB     r0,[r0,#0x10]
;;;374    //	printf("gy_s:%4d,%4d,%4d |",gy_s,tmpyh,tmpyl);	//debug
;;;375    
;;;376    	appLSM6DSL_Read(GYRO_ADDRESS, LSM6DSL_XG_OUT_Z_H_G, 1, &tmpzh);
0000a2  ab06              ADD      r3,sp,#0x18
0000a4  0200              LSLS     r0,r0,#8              ;373
0000a6  b206              SXTH     r6,r0                 ;373
0000a8  4668              MOV      r0,sp                 ;373
0000aa  7b00              LDRB     r0,[r0,#0xc]          ;373
0000ac  2201              MOVS     r2,#1
0000ae  4306              ORRS     r6,r6,r0              ;373
0000b0  2127              MOVS     r1,#0x27
0000b2  20d6              MOVS     r0,#0xd6
0000b4  f7fffffe          BL       appLSM6DSL_Read
;;;377    	appLSM6DSL_Read(GYRO_ADDRESS, LSM6DSL_XG_OUT_Z_L_G, 1, &tmpzl);
0000b8  ab05              ADD      r3,sp,#0x14
0000ba  2201              MOVS     r2,#1
0000bc  2126              MOVS     r1,#0x26
0000be  20d6              MOVS     r0,#0xd6
0000c0  f7fffffe          BL       appLSM6DSL_Read
;;;378    	gz_s = (((int16_t)(tmpzh << 8)) | ((int16_t)tmpzl));
0000c4  4668              MOV      r0,sp
0000c6  7e00              LDRB     r0,[r0,#0x18]
0000c8  0200              LSLS     r0,r0,#8
0000ca  b204              SXTH     r4,r0
0000cc  4668              MOV      r0,sp
0000ce  7d00              LDRB     r0,[r0,#0x14]
0000d0  4304              ORRS     r4,r4,r0
;;;379    //	printf("gz_s:%4d,%4d,%4d \r\n",gz_s,tmpzh,tmpzl);	//debug
;;;380    	
;;;381    	appLSM6DSL_SetGyroData(AXIS_X,(int16_t)(gx_s*sensitivity)/1000);	
0000d2  4638              MOV      r0,r7
0000d4  f7fffffe          BL       __aeabi_i2f
0000d8  4629              MOV      r1,r5
0000da  f7fffffe          BL       __aeabi_fmul
0000de  f7fffffe          BL       __aeabi_f2iz
0000e2  277d              MOVS     r7,#0x7d
0000e4  00ff              LSLS     r7,r7,#3
0000e6  b200              SXTH     r0,r0
0000e8  4639              MOV      r1,r7
0000ea  f7fffffe          BL       __aeabi_idivmod
0000ee  b201              SXTH     r1,r0
0000f0  2000              MOVS     r0,#0
0000f2  f7fffffe          BL       appLSM6DSL_SetGyroData
;;;382    	appLSM6DSL_SetGyroData(AXIS_Y,(int16_t)(gy_s*sensitivity)/1000);	
0000f6  4630              MOV      r0,r6
0000f8  f7fffffe          BL       __aeabi_i2f
0000fc  4629              MOV      r1,r5
0000fe  f7fffffe          BL       __aeabi_fmul
000102  f7fffffe          BL       __aeabi_f2iz
000106  b200              SXTH     r0,r0
000108  4639              MOV      r1,r7
00010a  f7fffffe          BL       __aeabi_idivmod
00010e  b201              SXTH     r1,r0
000110  2001              MOVS     r0,#1
000112  f7fffffe          BL       appLSM6DSL_SetGyroData
;;;383    	appLSM6DSL_SetGyroData(AXIS_Z,(int16_t)(gz_s*sensitivity)/1000);
000116  4620              MOV      r0,r4
000118  f7fffffe          BL       __aeabi_i2f
00011c  4629              MOV      r1,r5
00011e  f7fffffe          BL       __aeabi_fmul
000122  f7fffffe          BL       __aeabi_f2iz
000126  b200              SXTH     r0,r0
000128  4639              MOV      r1,r7
00012a  f7fffffe          BL       __aeabi_idivmod
00012e  b201              SXTH     r1,r0
000130  2002              MOVS     r0,#2
000132  f7fffffe          BL       appLSM6DSL_SetGyroData
;;;384    
;;;385    //	printf("Gyro : %4d,%4d,%4d\r\n",gx_s,gy_s,gz_s);
;;;386    
;;;387    	LSM6DSL_Delay(5);
000136  2005              MOVS     r0,#5
000138  f7fffffe          BL       LSM6DSL_Delay
;;;388    }
00013c  b007              ADD      sp,sp,#0x1c
00013e  bdf0              POP      {r4-r7,pc}
;;;389    
                          ENDP

                  |L10.320|
                          DCD      0x408c0000
                  |L10.324|
                          DCD      0x410c0000
                  |L10.328|
                          DCD      0x418c0000
                  |L10.332|
                          DCD      0x420c0000
                  |L10.336|
                          DCD      0x428c0000

                          AREA ||i.appLSM6DSL_GetGyroData||, CODE, READONLY, ALIGN=2

                  appLSM6DSL_GetGyroData PROC
;;;248    
;;;249    int16_t appLSM6DSL_GetGyroData(AXIS_TypeDef axis)
000000  4601              MOV      r1,r0
;;;250    {
;;;251    	int16_t data = 0;
000002  2000              MOVS     r0,#0
;;;252    	
;;;253    	switch(axis)
;;;254    	{
;;;255    		case AXIS_X:
;;;256    			data = LSM6DSL_GYROx + cLSM6DSL_GYROx; 
000004  4a08              LDR      r2,|L11.40|
000006  2900              CMP      r1,#0                 ;253
000008  d008              BEQ      |L11.28|
00000a  2901              CMP      r1,#1                 ;253
00000c  d009              BEQ      |L11.34|
00000e  2902              CMP      r1,#2                 ;253
000010  d103              BNE      |L11.26|
;;;257    			break;
;;;258    
;;;259    		case AXIS_Y:
;;;260    			data = LSM6DSL_GYROy + cLSM6DSL_GYROy; 
;;;261    			break;
;;;262    
;;;263    		case AXIS_Z:
;;;264    			data = LSM6DSL_GYROz + cLSM6DSL_GYROz; 
000012  8b10              LDRH     r0,[r2,#0x18]  ; LSM6DSL_GYROz
000014  8991              LDRH     r1,[r2,#0xc]  ; cLSM6DSL_GYROz
                  |L11.22|
000016  1840              ADDS     r0,r0,r1
000018  b200              SXTH     r0,r0
                  |L11.26|
;;;265    			break;				
;;;266    	}
;;;267    	
;;;268    	return data ;
;;;269    }
00001a  4770              BX       lr
                  |L11.28|
00001c  8a90              LDRH     r0,[r2,#0x14]         ;256  ; LSM6DSL_GYROx
00001e  8911              LDRH     r1,[r2,#8]            ;256  ; cLSM6DSL_GYROx
000020  e7f9              B        |L11.22|
                  |L11.34|
000022  8ad0              LDRH     r0,[r2,#0x16]         ;260  ; LSM6DSL_GYROy
000024  8951              LDRH     r1,[r2,#0xa]          ;260  ; cLSM6DSL_GYROy
000026  e7f6              B        |L11.22|
;;;270    
                          ENDP

                  |L11.40|
                          DCD      ||.data||

                          AREA ||i.appLSM6DSL_GetWhoAmI||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  appLSM6DSL_GetWhoAmI PROC
;;;531    
;;;532    void appLSM6DSL_GetWhoAmI(void)
000000  b508              PUSH     {r3,lr}
;;;533    {
;;;534    	uint8_t data;
;;;535    	
;;;536    	appLSM6DSL_Read(ACC_ADDRESS, LSM6DSL_XG_WHO_AM_I_ADDR, 1, &data);	// value : 0x6A	
000002  466b              MOV      r3,sp
000004  2201              MOVS     r2,#1
000006  210f              MOVS     r1,#0xf
000008  20d6              MOVS     r0,#0xd6
00000a  f7fffffe          BL       appLSM6DSL_Read
;;;537    	printf("WHO_AM_I : 0x%2X\r\n" , data);
00000e  4668              MOV      r0,sp
000010  7801              LDRB     r1,[r0,#0]
000012  a002              ADR      r0,|L12.28|
000014  f7fffffe          BL       __2printf
;;;538    }	
000018  bd08              POP      {r3,pc}
;;;539    
                          ENDP

00001a  0000              DCW      0x0000
                  |L12.28|
00001c  57484f5f          DCB      "WHO_AM_I : 0x%2X\r\n",0
000020  414d5f49
000024  203a2030
000028  78253258
00002c  0d0a00  
00002f  00                DCB      0

                          AREA ||i.appLSM6DSL_Read||, CODE, READONLY, ALIGN=1

                  appLSM6DSL_Read PROC
;;;50     
;;;51     void appLSM6DSL_Read(uint8_t DeviceAddr, uint8_t RegisterAddr,
000000  b510              PUSH     {r4,lr}
;;;52                                   uint16_t NumByteToRead,
;;;53                                   uint8_t* pBuffer)
;;;54     {
000002  461c              MOV      r4,r3
;;;55     	#if defined (ENABLE_I2C_POLLING_DISCRETE)
;;;56     	uint8_t i, tmp;
;;;57     	I2C_T *i2c = I2C_SENSOR_PORT;
;;;58     	
;;;59     	I2C_START(i2c);                         			//Start
;;;60     	I2C_WAIT_READY(i2c);
;;;61     
;;;62     	I2C_SET_DATA(i2c, DeviceAddr | I2C_WR );             		//send slave address+W
;;;63     	I2C_SET_CONTROL_REG(i2c, I2C_CTL_SI);
;;;64     	I2C_WAIT_READY(i2c);
;;;65     
;;;66     	I2C_SET_DATA(i2c, RegisterAddr);             		//send index
;;;67     	I2C_SET_CONTROL_REG(i2c, I2C_CTL_SI);
;;;68     	I2C_WAIT_READY(i2c);
;;;69     
;;;70     	I2C_SET_CONTROL_REG(i2c, I2C_CTL_STA_SI);		//Start
;;;71     	I2C_WAIT_READY(i2c);
;;;72     
;;;73     	I2C_SET_DATA(i2c, DeviceAddr | I2C_RD );    			//send slave address+R
;;;74     	I2C_SET_CONTROL_REG(i2c, I2C_CTL_SI);
;;;75     	I2C_WAIT_READY(i2c);
;;;76     
;;;77     	for (i=0; i<NumByteToRead; i++)
;;;78     	{
;;;79     		I2C_SET_CONTROL_REG(i2c, I2C_CTL_SI);
;;;80     		I2C_WAIT_READY(i2c);
;;;81     		tmp = I2C_GET_DATA(i2c);           			//read data
;;;82     		pBuffer[i]=tmp;
;;;83     	}
;;;84     	I2C_STOP(i2c);									//Stop
;;;85     
;;;86     	#elif defined (ENABLE_I2C_POLLING_API)
;;;87     	
;;;88     	/* u8SlaveAddr     Access Slave address(7-bit) */
;;;89     	uint8_t u8SlaveAddr = DeviceAddr >>1;
;;;90     //	uint8_t i = 0;
;;;91     	
;;;92     	I2C_ReadMultiBytesOneReg(I2C_SENSOR_PORT, u8SlaveAddr, RegisterAddr, pBuffer, NumByteToRead);	
;;;93     //	i = I2C_ReadByteOneReg(I2C_SENSOR_PORT, u8SlaveAddr, RegisterAddr);
;;;94     //	*pBuffer =  i;
;;;95     
;;;96     	#elif defined (ENABLE_I2C_IRQ)
;;;97     
;;;98     	/* u8SlaveAddr     Access Slave address(7-bit) */
;;;99     	uint8_t u8SlaveAddr = DeviceAddr >>1;
;;;100    	
;;;101    	I2Cx_ReadMultiFromSlaveIRQ(u8SlaveAddr , RegisterAddr, pBuffer, NumByteToRead);
000004  4613              MOV      r3,r2
000006  0840              LSRS     r0,r0,#1              ;99
000008  4622              MOV      r2,r4
00000a  f7fffffe          BL       I2Cx_ReadMultiFromSlaveIRQ
;;;102    	
;;;103    	#endif
;;;104    }
00000e  bd10              POP      {r4,pc}
;;;105    
                          ENDP


                          AREA ||i.appLSM6DSL_SetACC||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  appLSM6DSL_SetACC PROC
;;;478    
;;;479    void appLSM6DSL_SetACC(void)
000000  b508              PUSH     {r3,lr}
;;;480    {
;;;481    	uint8_t data;
;;;482    
;;;483    	appLSM6DSL_Read(ACC_ADDRESS, LSM6DSL_XG_WHO_AM_I_ADDR, 1, &data);	// value : 0x6A	
000002  466b              MOV      r3,sp
000004  2201              MOVS     r2,#1
000006  210f              MOVS     r1,#0xf
000008  20d6              MOVS     r0,#0xd6
00000a  f7fffffe          BL       appLSM6DSL_Read
;;;484    
;;;485    	printf("WHO_AM_I : 0x%2X\r\n" , data);
00000e  4668              MOV      r0,sp
000010  7801              LDRB     r1,[r0,#0]
000012  a008              ADR      r0,|L14.52|
000014  f7fffffe          BL       __2printf
;;;486    	
;;;487    	appLSM6DSL_Set_SW_RESET();
000018  f7fffffe          BL       appLSM6DSL_Set_SW_RESET
;;;488    	appLSM6DSL_Set_IF_Addr_Incr();
00001c  f7fffffe          BL       appLSM6DSL_Set_IF_Addr_Incr
;;;489    	appLSM6DSL_Set_BDU();
000020  f7fffffe          BL       appLSM6DSL_Set_BDU
;;;490    	appLSM6DSL_Set_FIFO_MODE();
000024  f7fffffe          BL       appLSM6DSL_Set_FIFO_MODE
;;;491    	appLSM6DSL_Set_ODR_XL();
000028  f7fffffe          BL       appLSM6DSL_Set_ODR_XL
;;;492    	appLSM6DSL_Set_FS_XL();
00002c  f7fffffe          BL       appLSM6DSL_Set_FS_XL
;;;493    
;;;494    }
000030  bd08              POP      {r3,pc}
;;;495    
                          ENDP

000032  0000              DCW      0x0000
                  |L14.52|
000034  57484f5f          DCB      "WHO_AM_I : 0x%2X\r\n",0
000038  414d5f49
00003c  203a2030
000040  78253258
000044  0d0a00  
000047  00                DCB      0

                          AREA ||i.appLSM6DSL_SetAccCalData||, CODE, READONLY, ALIGN=2

                  appLSM6DSL_SetAccCalData PROC
;;;153    
;;;154    void appLSM6DSL_SetAccCalData(AXIS_TypeDef axis,int16_t data)
000000  4a06              LDR      r2,|L15.28|
;;;155    {
;;;156    	switch(axis)
000002  2800              CMP      r0,#0
000004  d005              BEQ      |L15.18|
000006  2801              CMP      r0,#1
000008  d005              BEQ      |L15.22|
00000a  2802              CMP      r0,#2
00000c  d100              BNE      |L15.16|
;;;157    	{
;;;158    		case AXIS_X:
;;;159    			cLSM6DSL_ACCx = data; 
;;;160    			break;
;;;161    
;;;162    		case AXIS_Y:
;;;163    			cLSM6DSL_ACCy = data; 
;;;164    			break;
;;;165    
;;;166    		case AXIS_Z:
;;;167    			cLSM6DSL_ACCz = data; 
00000e  80d1              STRH     r1,[r2,#6]
                  |L15.16|
;;;168    			break;				
;;;169    	}
;;;170    }
000010  4770              BX       lr
                  |L15.18|
000012  8051              STRH     r1,[r2,#2]            ;159
000014  4770              BX       lr
                  |L15.22|
000016  8091              STRH     r1,[r2,#4]            ;163
000018  4770              BX       lr
;;;171    
                          ENDP

00001a  0000              DCW      0x0000
                  |L15.28|
                          DCD      ||.data||

                          AREA ||i.appLSM6DSL_SetAccData||, CODE, READONLY, ALIGN=2

                  appLSM6DSL_SetAccData PROC
;;;189    
;;;190    void appLSM6DSL_SetAccData(AXIS_TypeDef axis,int16_t data)
000000  4a06              LDR      r2,|L16.28|
;;;191    {
;;;192    	switch(axis)
000002  2800              CMP      r0,#0
000004  d005              BEQ      |L16.18|
000006  2801              CMP      r0,#1
000008  d005              BEQ      |L16.22|
00000a  2802              CMP      r0,#2
00000c  d100              BNE      |L16.16|
;;;193    	{
;;;194    		case AXIS_X:
;;;195    			LSM6DSL_ACCx = data; 
;;;196    			break;
;;;197    
;;;198    		case AXIS_Y:
;;;199    			LSM6DSL_ACCy = data; 
;;;200    			break;
;;;201    
;;;202    		case AXIS_Z:
;;;203    			LSM6DSL_ACCz = data; 
00000e  8251              STRH     r1,[r2,#0x12]
                  |L16.16|
;;;204    			break;				
;;;205    	}
;;;206    }
000010  4770              BX       lr
                  |L16.18|
000012  81d1              STRH     r1,[r2,#0xe]          ;195
000014  4770              BX       lr
                  |L16.22|
000016  8211              STRH     r1,[r2,#0x10]         ;199
000018  4770              BX       lr
;;;207    
                          ENDP

00001a  0000              DCW      0x0000
                  |L16.28|
                          DCD      ||.data||

                          AREA ||i.appLSM6DSL_SetGyro||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  appLSM6DSL_SetGyro PROC
;;;495    
;;;496    void appLSM6DSL_SetGyro(void)
000000  b508              PUSH     {r3,lr}
;;;497    {
;;;498    	uint8_t data;
;;;499    
;;;500    	appLSM6DSL_Read(GYRO_ADDRESS, LSM6DSL_XG_WHO_AM_I_ADDR, 1, &data);	// value : 0x6A
000002  466b              MOV      r3,sp
000004  2201              MOVS     r2,#1
000006  210f              MOVS     r1,#0xf
000008  20d6              MOVS     r0,#0xd6
00000a  f7fffffe          BL       appLSM6DSL_Read
;;;501    
;;;502    	printf("WHO_AM_I : 0x%2X\r\n" , data);
00000e  4668              MOV      r0,sp
000010  7801              LDRB     r1,[r0,#0]
000012  a007              ADR      r0,|L17.48|
000014  f7fffffe          BL       __2printf
;;;503    	
;;;504    	appLSM6DSL_Set_IF_Addr_Incr();
000018  f7fffffe          BL       appLSM6DSL_Set_IF_Addr_Incr
;;;505    	appLSM6DSL_Set_BDU();
00001c  f7fffffe          BL       appLSM6DSL_Set_BDU
;;;506    	appLSM6DSL_Set_FIFO_MODE();
000020  f7fffffe          BL       appLSM6DSL_Set_FIFO_MODE
;;;507    	appLSM6DSL_Set_ODR_G();
000024  f7fffffe          BL       appLSM6DSL_Set_ODR_G
;;;508    	appLSM6DSL_Set_FS_G();	
000028  f7fffffe          BL       appLSM6DSL_Set_FS_G
;;;509    	
;;;510    }
00002c  bd08              POP      {r3,pc}
;;;511    
                          ENDP

00002e  0000              DCW      0x0000
                  |L17.48|
000030  57484f5f          DCB      "WHO_AM_I : 0x%2X\r\n",0
000034  414d5f49
000038  203a2030
00003c  78253258
000040  0d0a00  
000043  00                DCB      0

                          AREA ||i.appLSM6DSL_SetGyroCalData||, CODE, READONLY, ALIGN=2

                  appLSM6DSL_SetGyroCalData PROC
;;;171    
;;;172    void appLSM6DSL_SetGyroCalData(AXIS_TypeDef axis,int16_t data)
000000  4a06              LDR      r2,|L18.28|
;;;173    {
;;;174    	switch(axis)
000002  2800              CMP      r0,#0
000004  d005              BEQ      |L18.18|
000006  2801              CMP      r0,#1
000008  d005              BEQ      |L18.22|
00000a  2802              CMP      r0,#2
00000c  d100              BNE      |L18.16|
;;;175    	{
;;;176    		case AXIS_X:
;;;177    			cLSM6DSL_GYROx = data; 
;;;178    			break;
;;;179    
;;;180    		case AXIS_Y:
;;;181    			cLSM6DSL_GYROy = data; 
;;;182    			break;
;;;183    
;;;184    		case AXIS_Z:
;;;185    			cLSM6DSL_GYROz = data; 
00000e  8191              STRH     r1,[r2,#0xc]
                  |L18.16|
;;;186    			break;				
;;;187    	}
;;;188    }
000010  4770              BX       lr
                  |L18.18|
000012  8111              STRH     r1,[r2,#8]            ;177
000014  4770              BX       lr
                  |L18.22|
000016  8151              STRH     r1,[r2,#0xa]          ;181
000018  4770              BX       lr
;;;189    
                          ENDP

00001a  0000              DCW      0x0000
                  |L18.28|
                          DCD      ||.data||

                          AREA ||i.appLSM6DSL_SetGyroData||, CODE, READONLY, ALIGN=2

                  appLSM6DSL_SetGyroData PROC
;;;207    
;;;208    void appLSM6DSL_SetGyroData(AXIS_TypeDef axis,int16_t data)
000000  4a06              LDR      r2,|L19.28|
;;;209    {
;;;210    	switch(axis)
000002  2800              CMP      r0,#0
000004  d005              BEQ      |L19.18|
000006  2801              CMP      r0,#1
000008  d005              BEQ      |L19.22|
00000a  2802              CMP      r0,#2
00000c  d100              BNE      |L19.16|
;;;211    	{
;;;212    		case AXIS_X:
;;;213    			LSM6DSL_GYROx = data; 
;;;214    			break;
;;;215    
;;;216    		case AXIS_Y:
;;;217    			LSM6DSL_GYROy = data; 
;;;218    			break;
;;;219    
;;;220    		case AXIS_Z:
;;;221    			LSM6DSL_GYROz = data; 
00000e  8311              STRH     r1,[r2,#0x18]
                  |L19.16|
;;;222    			break;				
;;;223    	}
;;;224    }
000010  4770              BX       lr
                  |L19.18|
000012  8291              STRH     r1,[r2,#0x14]         ;213
000014  4770              BX       lr
                  |L19.22|
000016  82d1              STRH     r1,[r2,#0x16]         ;217
000018  4770              BX       lr
;;;225    
                          ENDP

00001a  0000              DCW      0x0000
                  |L19.28|
                          DCD      ||.data||

                          AREA ||i.appLSM6DSL_Set_BDU||, CODE, READONLY, ALIGN=1

                  appLSM6DSL_Set_BDU PROC
;;;400    
;;;401    void appLSM6DSL_Set_BDU(void)
000000  b508              PUSH     {r3,lr}
;;;402    {
;;;403    	uint8_t value = 0;
000002  2000              MOVS     r0,#0
000004  4669              MOV      r1,sp
000006  7008              STRB     r0,[r1,#0]
;;;404    	
;;;405    	appLSM6DSL_Read(ACC_ADDRESS, LSM6DSL_XG_CTRL3_C, 1,&value);
000008  466b              MOV      r3,sp
00000a  2201              MOVS     r2,#1
00000c  2112              MOVS     r1,#0x12
00000e  20d6              MOVS     r0,#0xd6
000010  f7fffffe          BL       appLSM6DSL_Read
;;;406    	value &= ~LSM6DSL_ACC_GYRO_BDU_MASK;
000014  4669              MOV      r1,sp
000016  7808              LDRB     r0,[r1,#0]
000018  21bf              MOVS     r1,#0xbf
00001a  4008              ANDS     r0,r0,r1
;;;407    	value |= LSM6DSL_ACC_GYRO_BDU_BLOCK_UPDATE;
00001c  2140              MOVS     r1,#0x40
00001e  4308              ORRS     r0,r0,r1
000020  4669              MOV      r1,sp
000022  7008              STRB     r0,[r1,#0]
;;;408    
;;;409    	appLSM6DSL_Write(ACC_ADDRESS, LSM6DSL_XG_CTRL3_C, 1,&value);
000024  466b              MOV      r3,sp
000026  2201              MOVS     r2,#1
000028  2112              MOVS     r1,#0x12
00002a  20d6              MOVS     r0,#0xd6
00002c  f7fffffe          BL       appLSM6DSL_Write
;;;410    }
000030  bd08              POP      {r3,pc}
;;;411    
                          ENDP


                          AREA ||i.appLSM6DSL_Set_FIFO_MODE||, CODE, READONLY, ALIGN=1

                  appLSM6DSL_Set_FIFO_MODE PROC
;;;411    
;;;412    void appLSM6DSL_Set_FIFO_MODE(void)
000000  b508              PUSH     {r3,lr}
;;;413    {
;;;414    	uint8_t value = 0;
000002  2000              MOVS     r0,#0
000004  4669              MOV      r1,sp
000006  7008              STRB     r0,[r1,#0]
;;;415    	
;;;416    	appLSM6DSL_Read(ACC_ADDRESS, LSM6DSL_XG_FIFO_CTRL5, 1,&value);
000008  466b              MOV      r3,sp
00000a  2201              MOVS     r2,#1
00000c  210a              MOVS     r1,#0xa
00000e  20d6              MOVS     r0,#0xd6
000010  f7fffffe          BL       appLSM6DSL_Read
;;;417    	value &= ~LSM6DSL_XG_FIFO_MODE_MASK;
000014  4669              MOV      r1,sp
000016  7808              LDRB     r0,[r1,#0]
;;;418    	value |= LSM6DSL_XG_FIFO_MODE_BYPASS;
;;;419    
;;;420    	appLSM6DSL_Write(ACC_ADDRESS, LSM6DSL_XG_FIFO_CTRL5, 1,&value);
000018  466b              MOV      r3,sp
00001a  08c0              LSRS     r0,r0,#3              ;417
00001c  00c0              LSLS     r0,r0,#3              ;417
00001e  7008              STRB     r0,[r1,#0]            ;418
000020  2201              MOVS     r2,#1
000022  210a              MOVS     r1,#0xa
000024  20d6              MOVS     r0,#0xd6
000026  f7fffffe          BL       appLSM6DSL_Write
;;;421    }
00002a  bd08              POP      {r3,pc}
;;;422    
                          ENDP


                          AREA ||i.appLSM6DSL_Set_FS_G||, CODE, READONLY, ALIGN=1

                  appLSM6DSL_Set_FS_G PROC
;;;444    
;;;445    void appLSM6DSL_Set_FS_G(void)
000000  b508              PUSH     {r3,lr}
;;;446    {
;;;447    	uint8_t value = 0;
000002  2000              MOVS     r0,#0
000004  4669              MOV      r1,sp
000006  7008              STRB     r0,[r1,#0]
;;;448    	
;;;449    	appLSM6DSL_Read(ACC_ADDRESS, LSM6DSL_XG_CTRL2_G, 1,&value);
000008  466b              MOV      r3,sp
00000a  2201              MOVS     r2,#1
00000c  2111              MOVS     r1,#0x11
00000e  20d6              MOVS     r0,#0xd6
000010  f7fffffe          BL       appLSM6DSL_Read
;;;450    	value &= ~LSM6DSL_G_FS_MASK;
000014  4669              MOV      r1,sp
000016  7808              LDRB     r0,[r1,#0]
000018  21f3              MOVS     r1,#0xf3
00001a  4008              ANDS     r0,r0,r1
;;;451    	value |= LSM6DSL_G_FS_245;	//LSM6DSL_G_FS_500 , LSM6DSL_G_FS_1000
00001c  4669              MOV      r1,sp
00001e  7008              STRB     r0,[r1,#0]
;;;452    
;;;453    	appLSM6DSL_Write(ACC_ADDRESS, LSM6DSL_XG_CTRL2_G, 1,&value);
000020  466b              MOV      r3,sp
000022  2201              MOVS     r2,#1
000024  2111              MOVS     r1,#0x11
000026  20d6              MOVS     r0,#0xd6
000028  f7fffffe          BL       appLSM6DSL_Write
;;;454    }
00002c  bd08              POP      {r3,pc}
;;;455    
                          ENDP


                          AREA ||i.appLSM6DSL_Set_FS_XL||, CODE, READONLY, ALIGN=1

                  appLSM6DSL_Set_FS_XL PROC
;;;455    
;;;456    void appLSM6DSL_Set_FS_XL(void)
000000  b508              PUSH     {r3,lr}
;;;457    {
;;;458    	uint8_t value = 0;
000002  2000              MOVS     r0,#0
000004  4669              MOV      r1,sp
000006  7008              STRB     r0,[r1,#0]
;;;459    	
;;;460    	appLSM6DSL_Read(ACC_ADDRESS, LSM6DSL_XG_CTRL1_XL, 1,&value);
000008  466b              MOV      r3,sp
00000a  2201              MOVS     r2,#1
00000c  2110              MOVS     r1,#0x10
00000e  20d6              MOVS     r0,#0xd6
000010  f7fffffe          BL       appLSM6DSL_Read
;;;461    	value &= ~LSM6DSL_XL_FS_MASK;
000014  4669              MOV      r1,sp
000016  7808              LDRB     r0,[r1,#0]
000018  21f3              MOVS     r1,#0xf3
00001a  4008              ANDS     r0,r0,r1
;;;462    	value |= LSM6DSL_XL_FS_2G;	//LSM6DSL_XL_FS_4G , LSM6DSL_XL_FS_8G
00001c  4669              MOV      r1,sp
00001e  7008              STRB     r0,[r1,#0]
;;;463    
;;;464    	appLSM6DSL_Write(ACC_ADDRESS, LSM6DSL_XG_CTRL1_XL, 1,&value);
000020  466b              MOV      r3,sp
000022  2201              MOVS     r2,#1
000024  2110              MOVS     r1,#0x10
000026  20d6              MOVS     r0,#0xd6
000028  f7fffffe          BL       appLSM6DSL_Write
;;;465    }
00002c  bd08              POP      {r3,pc}
;;;466    
                          ENDP


                          AREA ||i.appLSM6DSL_Set_IF_Addr_Incr||, CODE, READONLY, ALIGN=1

                  appLSM6DSL_Set_IF_Addr_Incr PROC
;;;389    
;;;390    void appLSM6DSL_Set_IF_Addr_Incr(void)
000000  b508              PUSH     {r3,lr}
;;;391    {
;;;392    	uint8_t value = 0;
000002  2000              MOVS     r0,#0
000004  4669              MOV      r1,sp
000006  7008              STRB     r0,[r1,#0]
;;;393    	
;;;394    	appLSM6DSL_Read(ACC_ADDRESS, LSM6DSL_XG_CTRL3_C, 1,&value);
000008  466b              MOV      r3,sp
00000a  2201              MOVS     r2,#1
00000c  2112              MOVS     r1,#0x12
00000e  20d6              MOVS     r0,#0xd6
000010  f7fffffe          BL       appLSM6DSL_Read
;;;395    	value &= ~LSM6DSL_XG_IF_INC_MASK;
000014  4669              MOV      r1,sp
000016  7808              LDRB     r0,[r1,#0]
000018  21fb              MOVS     r1,#0xfb
00001a  4008              ANDS     r0,r0,r1
;;;396    	value |= LSM6DSL_XG_IF_INC;
00001c  2104              MOVS     r1,#4
00001e  4308              ORRS     r0,r0,r1
000020  4669              MOV      r1,sp
000022  7008              STRB     r0,[r1,#0]
;;;397    
;;;398    	appLSM6DSL_Write(ACC_ADDRESS, LSM6DSL_XG_CTRL3_C, 1,&value);
000024  466b              MOV      r3,sp
000026  2201              MOVS     r2,#1
000028  2112              MOVS     r1,#0x12
00002a  20d6              MOVS     r0,#0xd6
00002c  f7fffffe          BL       appLSM6DSL_Write
;;;399    }
000030  bd08              POP      {r3,pc}
;;;400    
                          ENDP


                          AREA ||i.appLSM6DSL_Set_ODR_G||, CODE, READONLY, ALIGN=1

                  appLSM6DSL_Set_ODR_G PROC
;;;422    
;;;423    void appLSM6DSL_Set_ODR_G(void)
000000  b508              PUSH     {r3,lr}
;;;424    {
;;;425    	uint8_t value = 0;
000002  2000              MOVS     r0,#0
000004  4669              MOV      r1,sp
000006  7008              STRB     r0,[r1,#0]
;;;426    	
;;;427    	appLSM6DSL_Read(GYRO_ADDRESS, LSM6DSL_XG_CTRL2_G, 1,&value);
000008  466b              MOV      r3,sp
00000a  2201              MOVS     r2,#1
00000c  2111              MOVS     r1,#0x11
00000e  20d6              MOVS     r0,#0xd6
000010  f7fffffe          BL       appLSM6DSL_Read
;;;428    	value &= ~LSM6DSL_G_ODR_MASK;
000014  4669              MOV      r1,sp
000016  7808              LDRB     r0,[r1,#0]
;;;429    	value |= LSM6DSL_G_ODR_1K66HZ;
000018  2180              MOVS     r1,#0x80
00001a  0700              LSLS     r0,r0,#28             ;428
00001c  0f00              LSRS     r0,r0,#28             ;428
00001e  4308              ORRS     r0,r0,r1
000020  4669              MOV      r1,sp
000022  7008              STRB     r0,[r1,#0]
;;;430    
;;;431    	appLSM6DSL_Write(GYRO_ADDRESS, LSM6DSL_XG_CTRL2_G, 1,&value);
000024  466b              MOV      r3,sp
000026  2201              MOVS     r2,#1
000028  2111              MOVS     r1,#0x11
00002a  20d6              MOVS     r0,#0xd6
00002c  f7fffffe          BL       appLSM6DSL_Write
;;;432    }
000030  bd08              POP      {r3,pc}
;;;433    
                          ENDP


                          AREA ||i.appLSM6DSL_Set_ODR_XL||, CODE, READONLY, ALIGN=1

                  appLSM6DSL_Set_ODR_XL PROC
;;;433    
;;;434    void appLSM6DSL_Set_ODR_XL(void)
000000  b508              PUSH     {r3,lr}
;;;435    {
;;;436    	uint8_t value = 0;
000002  2000              MOVS     r0,#0
000004  4669              MOV      r1,sp
000006  7008              STRB     r0,[r1,#0]
;;;437    	
;;;438    	appLSM6DSL_Read(ACC_ADDRESS, LSM6DSL_XG_CTRL1_XL, 1,&value);
000008  466b              MOV      r3,sp
00000a  2201              MOVS     r2,#1
00000c  2110              MOVS     r1,#0x10
00000e  20d6              MOVS     r0,#0xd6
000010  f7fffffe          BL       appLSM6DSL_Read
;;;439    	value &= ~LSM6DSL_XL_ODR_MASK;
000014  4669              MOV      r1,sp
000016  7808              LDRB     r0,[r1,#0]
;;;440    	value |= LSM6DSL_XL_ODR_1K66HZ;
000018  2180              MOVS     r1,#0x80
00001a  0700              LSLS     r0,r0,#28             ;439
00001c  0f00              LSRS     r0,r0,#28             ;439
00001e  4308              ORRS     r0,r0,r1
000020  4669              MOV      r1,sp
000022  7008              STRB     r0,[r1,#0]
;;;441    
;;;442    	appLSM6DSL_Write(ACC_ADDRESS, LSM6DSL_XG_CTRL1_XL, 1,&value);
000024  466b              MOV      r3,sp
000026  2201              MOVS     r2,#1
000028  2110              MOVS     r1,#0x10
00002a  20d6              MOVS     r0,#0xd6
00002c  f7fffffe          BL       appLSM6DSL_Write
;;;443    }
000030  bd08              POP      {r3,pc}
;;;444    
                          ENDP


                          AREA ||i.appLSM6DSL_Set_SW_RESET||, CODE, READONLY, ALIGN=1

                  appLSM6DSL_Set_SW_RESET PROC
;;;466    
;;;467    void appLSM6DSL_Set_SW_RESET(void)
000000  b508              PUSH     {r3,lr}
;;;468    {
;;;469    	uint8_t value = 0;
000002  2000              MOVS     r0,#0
000004  4669              MOV      r1,sp
000006  7008              STRB     r0,[r1,#0]
;;;470    	
;;;471    	appLSM6DSL_Read(ACC_ADDRESS, LSM6DSL_XG_CTRL3_C, 1,&value);
000008  466b              MOV      r3,sp
00000a  2201              MOVS     r2,#1
00000c  2112              MOVS     r1,#0x12
00000e  20d6              MOVS     r0,#0xd6
000010  f7fffffe          BL       appLSM6DSL_Read
;;;472    	value &= ~LSM6DSL_ACC_GYRO_SW_RESET_MASK;
000014  4669              MOV      r1,sp
000016  7808              LDRB     r0,[r1,#0]
;;;473    	value |= LSM6DSL_ACC_GYRO_SW_RESET_RESET_DEVICE;
000018  2101              MOVS     r1,#1
00001a  0840              LSRS     r0,r0,#1              ;472
00001c  0040              LSLS     r0,r0,#1              ;472
00001e  4308              ORRS     r0,r0,r1
000020  4669              MOV      r1,sp
000022  7008              STRB     r0,[r1,#0]
;;;474    
;;;475    	appLSM6DSL_Write(ACC_ADDRESS, LSM6DSL_XG_CTRL3_C, 1,&value);
000024  466b              MOV      r3,sp
000026  2201              MOVS     r2,#1
000028  2112              MOVS     r1,#0x12
00002a  20d6              MOVS     r0,#0xd6
00002c  f7fffffe          BL       appLSM6DSL_Write
;;;476    }
000030  bd08              POP      {r3,pc}
;;;477    
                          ENDP


                          AREA ||i.appLSM6DSL_Setup||, CODE, READONLY, ALIGN=1

                  appLSM6DSL_Setup PROC
;;;511    
;;;512    void appLSM6DSL_Setup(void)
000000  b510              PUSH     {r4,lr}
;;;513    {
;;;514    	appLSM6DSL_SetACC();	
000002  f7fffffe          BL       appLSM6DSL_SetACC
;;;515    	appLSM6DSL_SetGyro();
000006  f7fffffe          BL       appLSM6DSL_SetGyro
;;;516    
;;;517    }	
00000a  bd10              POP      {r4,pc}
;;;518    
                          ENDP


                          AREA ||i.appLSM6DSL_Write||, CODE, READONLY, ALIGN=1

                  appLSM6DSL_Write PROC
;;;105    
;;;106    void appLSM6DSL_Write(uint8_t DeviceAddr, uint8_t RegisterAddr,
000000  b510              PUSH     {r4,lr}
;;;107                                   uint16_t NumByteToWrite,
;;;108                                   uint8_t* pBuffer)
;;;109    {
000002  461c              MOV      r4,r3
;;;110    	#if defined (ENABLE_I2C_POLLING_DISCRETE)
;;;111    	uint8_t i;
;;;112    	uint32_t tmp;
;;;113    	
;;;114    	I2C_T *i2c = I2C_SENSOR_PORT;	
;;;115    	I2C_START(i2c);                    			//Start
;;;116    	I2C_WAIT_READY(i2c);
;;;117    
;;;118    	I2C_SET_DATA(i2c, DeviceAddr | I2C_WR );        			//send slave address
;;;119    	I2C_SET_CONTROL_REG(i2c, I2C_CTL_SI);
;;;120    	I2C_WAIT_READY(i2c);
;;;121    
;;;122    	I2C_SET_DATA(i2c, RegisterAddr);        			//send index
;;;123    	I2C_SET_CONTROL_REG(i2c, I2C_CTL_SI);
;;;124    	I2C_WAIT_READY(i2c);
;;;125    
;;;126    	for (i=0; i<NumByteToWrite; i++)
;;;127    	{
;;;128    		tmp = pBuffer[i];
;;;129    		I2C_SET_DATA(i2c, tmp);            		//send Data
;;;130    		I2C_SET_CONTROL_REG(i2c, I2C_CTL_SI);
;;;131    		I2C_WAIT_READY(i2c);
;;;132    	}
;;;133    
;;;134    	I2C_STOP(i2c);								//Stop
;;;135    
;;;136    	#elif defined (ENABLE_I2C_POLLING_API)
;;;137    
;;;138    	/* u8SlaveAddr     Access Slave address(7-bit) */
;;;139    	uint8_t u8SlaveAddr = DeviceAddr >>1;
;;;140    
;;;141    	I2C_WriteMultiBytesOneReg(I2C_SENSOR_PORT, u8SlaveAddr, RegisterAddr, pBuffer, NumByteToWrite);
;;;142    //	I2C_WriteByteOneReg(I2C_SENSOR_PORT, u8SlaveAddr , RegisterAddr, *pBuffer);	
;;;143    
;;;144    	#elif defined (ENABLE_I2C_IRQ)
;;;145    
;;;146    	/* u8SlaveAddr     Access Slave address(7-bit) */
;;;147    	uint8_t u8SlaveAddr = DeviceAddr >>1;
;;;148    	
;;;149    	I2Cx_WriteMultiToSlaveIRQ(u8SlaveAddr , RegisterAddr, pBuffer, NumByteToWrite);
000004  4613              MOV      r3,r2
000006  0840              LSRS     r0,r0,#1              ;147
000008  4622              MOV      r2,r4
00000a  f7fffffe          BL       I2Cx_WriteMultiToSlaveIRQ
;;;150    
;;;151    	#endif
;;;152    }
00000e  bd10              POP      {r4,pc}
;;;153    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  ax_buf
                          %        32
                  ay_buf
                          %        32
                  az_buf
                          %        32
                  gx_buf
                          %        32
                  gy_buf
                          %        32
                  gz_buf
                          %        32

                          AREA ||.data||, DATA, ALIGN=2

                  FlagSwitch
000000  00                DCB      0x00
                  Flag_Calibrate
000001  00                DCB      0x00
                  cLSM6DSL_ACCx
000002  0000              DCW      0x0000
                  cLSM6DSL_ACCy
000004  0000              DCW      0x0000
                  cLSM6DSL_ACCz
000006  0000              DCW      0x0000
                  cLSM6DSL_GYROx
000008  0000              DCW      0x0000
                  cLSM6DSL_GYROy
00000a  0000              DCW      0x0000
                  cLSM6DSL_GYROz
00000c  0000              DCW      0x0000
                  LSM6DSL_ACCx
00000e  0000              DCB      0x00,0x00
                  LSM6DSL_ACCy
000010  0000              DCB      0x00,0x00
                  LSM6DSL_ACCz
000012  0000              DCB      0x00,0x00
                  LSM6DSL_GYROx
000014  0000              DCB      0x00,0x00
                  LSM6DSL_GYROy
000016  0000              DCB      0x00,0x00
                  LSM6DSL_GYROz
000018  0000              DCB      0x00,0x00
                  ||gx||
00001a  0000              DCB      0x00,0x00
                  ||gy||
00001c  0000              DCB      0x00,0x00
                  ||gz||
00001e  0000              DCB      0x00,0x00
                  ||ax||
000020  0000              DCB      0x00,0x00
                  ||ay||
000022  0000              DCB      0x00,0x00
                  ||az||
000024  00000000          DCB      0x00,0x00,0x00,0x00
                  RollAng
000028  00000000          DCFS     0x00000000 ; 0
                  PitchAng
00002c  00000000          DCFS     0x00000000 ; 0
                  angle_dot
                          DCD      0x00000000
                  f_angle
                          DCD      0x00000000
                  f_angle_dot
                          DCD      0x00000000

                          AREA ||area_number.34||, DATA, ALIGN=2

                          EXPORTAS ||area_number.34||, ||.data||
                  angle
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\I2C_LSM6DSL.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_I2C_LSM6DSL_c_41ae50e2____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___13_I2C_LSM6DSL_c_41ae50e2____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_I2C_LSM6DSL_c_41ae50e2____REVSH|
#line 402
|__asm___13_I2C_LSM6DSL_c_41ae50e2____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
